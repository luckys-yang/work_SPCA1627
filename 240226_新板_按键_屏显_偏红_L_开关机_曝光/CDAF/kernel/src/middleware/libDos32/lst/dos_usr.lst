C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE DOS_USR
OBJECT MODULE PLACED IN .\obj\dos_usr.obj
COMPILER INVOKED BY: e:\Keil\C51\BIN\C51.EXE D\dos_usr.c LARGE OMF2 OPTIMIZE(9,SIZE) NOAREGS INCDIR(..\..\..\inc;..\..\.
                    -.\inc\os;..\..\..\inc\hal;..\..\..\inc\middleware;..\..\..\inc\sp1k;..\..\..\..\host\inc\app;..\..\..\..\host\inc\custom
                    -ization) DEFINE(LIB_RELEASE) DEBUG PRINT(.\lst\dos_usr.lst) OBJECT(.\obj\dos_usr.obj)

line level    source

   1          /**************************************************************************
   2           *         Copyright(c) 2008 by Sunplus mMedia  Technology Co., Ltd.      *
   3           *                                                                        *
   4           *  This software is copyrighted by and is the property of Sunplus mMedia *
   5           *  Technology Co., Ltd. All rights are reserved by Sunplus mMedia Techno-*
   6           *  logy Co., Ltd. This software may only be used in accordance with the  *
   7           *  corresponding license agreement. Any unauthorized use, duplication,   *
   8           *  distribution, or disclosure of this software is expressly forbidden.  *
   9           *                                                                        *
  10           *  This Copyright notice "M U S T" not be removed or modified without    *
  11           *  prior written consent of Sunplus mMedia Technology  Co., Ltd.         *
  12           *                                                                        *
  13           *  Sunplus mMedia Technology Co., Ltd. reserves the right to modify this *
  14           *  software without notice.                                              *
  15           *                                                                        *
  16           *  Sunplus mMedia Technology Co., Ltd.                                   *
  17           *  19-1, Innovation First Road, Science-Based Industrial Park,           *
  18           *  Hsin-Chu, Taiwan, R.O.C.                                              *
  19           *                                                                        *
  20           *  Author: Ted Chiu                                                      *
  21           **************************************************************************/
  22          
  23          #include "general.h"
  24          #include "asicreg.h"
  25          #include "impt.h"
  26          #include "cardui.h"
  27          //#include "exptcode.h"
  28          
  29          #include "dosusr.h"
  30          #include "doslink.h"
  31          #include "doserr.h"
  32          #include "cardlink.h"
  33          
  34          //patch4.2@richie@ds0509
  35          #include "dramfunc.h"
  36          
  37          //patch3.2@ada@0401 For DPOF
  38          //#include "doscon.h"
  39          
  40          //patch3.2@ada@0401 for Multi-Frame Play Back
  41          #include "initio.h"
  42          #include "dosvar.h"
  43          
  44          
  45          #include "audio.h"
  46          
  47          //version4.0@ada@0513 for Play Back
  48          //#include "exifhdr.h"
  49          
  50          //patch4.5@ada@Complete H/W write protect function begin
  51          //#include "cardusr.h"
  52          #include "uiflow.h"
  53          #include "lcdtv.h"
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 2   

  54          #include "dos32.h"
  55          #include "hal_dram.h"
  56          #include "hal_gprm.h"
  57          #include "vfs_api.h"
  58          #include "fileindex.h"
  59          
  60          #include "dbg_def.h"
  61          #include "dbg_wdt.h"
  62          #include "dbg_mem.h"
  63          
  64          #include "disp_api.h"
  65          #include "pb_api.h"
  66          #include "video_slclip.h"
  67          
  68          #include "app_msg.h"
  69          #include "os_msg.h"
  70          
  71          #include "sp1k_snap_api.h"
  72          #include "timelapse.h"
  73          #include "dbg_def.h"
  74          #include "sd_bg.h"
  75          //patch4.5@ada@Complete H/W write protect function end
  76          
  77          #define __FILE  __FILE_ID_DOS_USR__
  78          
  79          #define FOLDER_FILE_OFFSET 0x40 
  80          xdata   UINT16  G_USR_MaxNormalDirCnt;
  81          xdata   UINT16  G_USR_MaxTlsVidDirCnt;
  82          
  83          xdata   UINT16    G_USR_Dir0Cluster;
  84          xdata   UINT16    G_USR_Dir1Cluster;
  85          xdata   UINT16    G_USR_Dir1Count;
  86          
  87          //version4.0@ada@0513 for Play Back
  88          xdata   UINT16  G_USR_SearchPreFileIndex;
  89          xdata   UINT16  G_USR_SearchNowFileIndex;
  90          xdata   UINT16  G_USR_SearchNextFileIndex;
  91          xdata   UINT16  G_USR_FirstFileIndex;
  92          xdata   UINT16  G_USR_LastFileIndex;
  93          
  94          
  95          xdata   UINT16    G_USR_FileIndex;
  96          xdata   UINT8    G_USR_FileType;
  97          xdata   UINT16    G_USR_FileCount;
  98          xdata   UINT16    G_USR_PlayIndex;
  99          xdata   UINT32   G_USR_AllFolderFileTotal;   //all folder file count
 100          
 101          xdata UINT8 dcfQuickInit;
 102          //patch5.1@ada@Fix MP3 bug begin
 103          extern code UINT8 G_USR_Song_UpperSIG[];
 104          
 105          #if (SINGLE_DIRECTORY == 0)
 106          //version4.0@ada@0513 for Multi-Directory
 107          
 108          //patch4.4@ada@DirectoryIndexOrder begin
 109          //xdata   UINT16  G_USR_Dir1CountIndex;
 110          xdata   UINT16  G_USR_MaxDir1Count;
 111          //xdata   UINT16  G_USR_MaxOurDir1CountIndex;
 112          xdata   UINT16  G_USR_TotalDirectory;
 113          xdata   UINT8   G_USR_OurDirectory;
 114          xdata   UINT16  G_USR_MinDir1Count;
 115          xdata   UINT16  G_USR_MaxOurDir1Count;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 3   

 116          xdata   UINT16  G_USR_PrevDir1Count;
 117          //patch4.4@ada@DirectoryIndexOrder end
 118          
 119          //patch4.5@ada@Duplicated file index in same DCF directory begin
 120          xdata   UINT16  G_USR_TempSearchNowFileIndex;
 121          xdata   UINT16  G_USR_TempLastFileIndex;
 122          xdata   UINT16  G_USR_PracticalMaxDirIndexCount;
 123          //patch4.5@ada@Duplicated file index in same DCF directory end
 124          #endif
 125          
 126          xdata   UINT16  G_USR_TempSearchNowFileIndex;
 127          xdata   UINT16  G_USR_TempLastFileIndex;
 128          
 129          UINT32 xdata G_USR_NewFileSizeInFdb;
 130          //New dos
 131          extern DOS dos;
 132          
 133          //xdata UINT32 G_DOS_FdbAddress;
 134          //xdata UINT32 dosFdbCluster;
 135          
 136          //xian ++ 20080806
 137          #define MT_DEBUG    0
 138          
 139          #if 0//def MULTI_FOLDER_AS_ONE
              #define OUR_DIR_MARK 0x8000
              xdata   UINT32  G_USR_MediaFileTotal;   //all folder
              xdata   UINT32  G_USR_CurFolderFirstFileIdx;
              #endif
 144          //xian --
 145          extern xdata    dateStc_t       G_DATEINFO;
 146          xdata UINT8 G_DCF_FileType_Mask = 0;    //xian ++ 20080826, enable all by default
 147          #define K_USR_JPG_TYPE_MASK     (1<<0)
 148          #define K_USR_AVI_TYPE_MASK     (1<<1)
 149          #define K_USR_WAV_TYPE_MASK     (1<<2)
 150          #define K_USR_WGI_TYPE_MASK     (1<<3)
 151          //UINT8 DOS_SetFdb(UINT8 *fdb, UINT32 fdbLogAddr);
 152          
 153          UINT8 G_USR_bUsrAssignFolder = 0;
 154          UINT16 G_USR_UsrAssignFolderCount = 0;
 155          
 156          void dcfDir1NameGet(UINT8* name, UINT16 dirIndex,UINT8 opt);
 157          UINT8 USR_FolderCategory(UINT8 *name,UINT8 opt);
 158          
 159          void dcfInitDir1NameGet(UINT8* name)
 160          {
 161   1              UINT8 i;
 162   1              for ( i = 0; i < 12; i++ )
 163   1              {
 164   2                      name[i]  = G_USR_Dir1Name[i];
 165   2              }
 166   1      }
 167          
 168          //-----------------------------------------------------------------------------
 169          //dcfBaseNameGet
 170          //-----------------------------------------------------------------------------
 171          void dcfBaseNameGet(UINT8 *name, UINT16 fileIndex) USING_0
 172          {
 173   1              UINT8 i;
 174   1              UINT8 ch;
 175   1      
 176   1              for ( i = 0; i < 4; i++ )
 177   1                      name[i]  = G_USR_Company_UpperSIG[i];
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 4   

 178   1              for (i = 7; i > 3; i--)
 179   1              {
 180   2                      ch = (UINT8) (fileIndex % 10) + '0';
 181   2                      fileIndex /= 10;
 182   2                      name[i] = ch;
 183   2              }
 184   1              name[11] = '\0';
 185   1      }
 186          
 187          void dcfMediaNameGet(UINT8 *name,UINT16 fileIndex,UINT8 type)
 188          {
 189   1              dcfBaseNameGet(name,fileIndex);
 190   1              switch( type ){
 191   2                      case MEDIA_JPG:
 192   2                              name[8]  = 'J';
 193   2                      name[9]  = 'P';
 194   2                      name[10] = 'G';
 195   2                      //name[11] = 0x20;
 196   2                      break;
 197   2                      case MEDIA_TLS:
 198   2                              name[8] = G_CustomerAVIName[0];
 199   2                              name[9] = G_CustomerAVIName[1];
 200   2                              name[10] = G_CustomerAVIName[2];
 201   2                              name[11] = G_CustomerAVIName[3];
 202   2                      break;
 203   2                      case MEDIA_AVI:
 204   2                              name[8] = 'A';
 205   2                              name[9] = 'V';
 206   2                              name[10] = 'I';
 207   2                      break;
 208   2                      case MEDIA_WAV:
 209   2                              name[8]  = 'W';
 210   2                      name[9]  = 'A';
 211   2                      name[10] = 'V';
 212   2                      //name[11] = 0x20;
 213   2                      break;
 214   2              }
 215   1      }
 216          //-----------------------------------------------------------------------------
 217          //dcfJpgNameGet
 218          //-----------------------------------------------------------------------------
 219          #if 0
              void dcfJpgNameGet(UINT8* name, UINT16 fileIndex) USING_0
              {
                      dcfBaseNameGet(name,fileIndex);
                      name[8]  = 'J';
                      name[9]  = 'P';
                      name[10] = 'G';
                      name[11] = 0x20;
              }
              #endif
 229          
 230          //#if ( AUDIO_OPTION == 1 )
 231          //-----------------------------------------------------------------------------
 232          //dcfWaveNameGet
 233          //-----------------------------------------------------------------------------
 234          /*void dcfWaveNameGet(UINT8* name, UINT16 fileIndex) USING_0
 235          {
 236                  dcfBaseNameGet(name,fileIndex);
 237                  name[8]  = 'W';
 238                  name[9]  = 'A';
 239                  name[10] = 'V';
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 5   

 240                  name[11] = 0x20;
 241          }*/
 242          //#endif
 243          
 244          #if ( K_File_HaveVideo == 1 )
 245          
 246          void dcfAviNameSet(UINT8* name)
 247          {
 248   1      //      name = NULL;
 249   1              UINT8 i;
 250   1              for ( i = 0; i < 3; i++ ){
 251   2                      G_CustomerAVIName[i] = name[i];
 252   2              }
 253   1      }
 254          
 255          //-----------------------------------------------------------------------------
 256          //dcfAviNameGet
 257          //-----------------------------------------------------------------------------
 258          #if 0
              void dcfAviNameGet(UINT8* name, UINT16 fileIndex) USING_0
              {
                      dcfBaseNameGet(name,fileIndex);
                      name[8] = G_CustomerAVIName[8];
                              name[9] = G_CustomerAVIName[9];
                              name[10] = G_CustomerAVIName[10];
                              name[11] = G_CustomerAVIName[11];
              }
              #endif
 268          #endif
 269          //patch4.4@ada@MP3 begin
 270          //patch4.4@ada@MP3 end
 271          
 272          //-----------------------------------------------------------------------------
 273          //dcfDir0NameGet
 274          //-----------------------------------------------------------------------------
 275          void dcfDir0NameGet(UINT8* name) USING_0
 276          {
 277   1              UINT8 i;
 278   1      
 279   1              for ( i = 0; i < 12; i++ )
 280   1                      name[i]  = G_USR_Dir0Name[i];
 281   1      }
 282          #if 0  // NOT USE
              //-----------------------------------------------------------------------------
              //dcfDir1NameGet
              //-----------------------------------------------------------------------------
              void dcfDir1NameGet(UINT8* name, UINT16 dirIndex) USING_0
              {
                      UINT8 i;
                      UINT8 ch;
                      UINT16 rem = dirIndex;
              
                      for ( i = 0; i < 12; i++ )
                              name[i]  = G_USR_Dir1Name[i];
              
                      for (i = 2; i != 0xff; i--)
                      {
                          ch = (UINT8) (rem % 10) + '0';
                          rem /= 10;
                          name[i] = ch;
                      }
              
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 6   

                      //version4.0@ada@0513 for DCF
                      //G_USR_Dir1Count++;
              }
              #endif
 306          //patch4.5@ada@Fix filtering DCF file name bug begin
 307          //patch4.4@ada@DCF begin
 308          //-----------------------------------------------------------------------------
 309          //USR_CheckDcfFileName
 310          //-----------------------------------------------------------------------------
 311          UINT8 USR_CheckDcfFileName(UINT8 *fdb)
 312          {
 313   1              UINT8 sts;
 314   1              UINT8 i;
 315   1      
 316   1           for (i = 0; i < 4; i++)
 317   1           {
 318   2                if ((('A' <= fdb[i]) && (fdb[i] <= 'Z')) || (fdb[i] == '_') || (('0' <= fdb[i]) && (fdb[i] <= '9
             -')))
 319   2                {
 320   3                     sts = TRUE;
 321   3                }
 322   2                      else
 323   2                      {
 324   3                              sts = FALSE;
 325   3                              return sts;
 326   3                      }
 327   2           }
 328   1      
 329   1           for (i = 4; i < 8; i++)
 330   1           {
 331   2                if (('0' <= fdb[i]) && (fdb[i] <= '9'))
 332   2                {
 333   3                     sts = TRUE;
 334   3                }
 335   2                      else
 336   2                      {
 337   3                              sts = FALSE;
 338   3                              return sts;
 339   3              }
 340   2              }
 341   1      
 342   1              return sts;
 343   1      }
 344          //patch4.4@ada@DCF end
 345          //patch4.5@ada@Fix filtering DCF file name bug end
 346          
 347          //-----------------------------------------------------------------------------
 348          //USR_CheckType
 349          //-----------------------------------------------------------------------------
 350          //patch3.2@ada@0401 For DCF
 351          //patch3.2@ada@0401 for Multi-Frame Play Back
 352          //version4.0@ada@0513 for DCF
 353          UINT8 USR_CheckType(UINT8 *fdb)
 354          {
 355   1              UINT8 sts = TRUE;
 356   1              UINT8 i;
 357   1              UINT8 fileType = 0;
 358   1              UINT16 index = 0;
 359   1      
 360   1              //patch4.3@ada@0618 for playback file index order
 361   1              UINT16 NowIndex,PreIndex,NextIndex,TempNowIndex;
 362   1              UINT8 tmp1,tmp2;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 7   

 363   1              
 364   1              //patch4.5@ada@Duplicated file index in same DCF directory begin
 365   1              UINT16 TempPreFileIndex;
 366   1              UINT16 TempNextFileIndex;
 367   1              //patch4.5@ada@Duplicated file index in same DCF directory end
 368   1              UINT8 voiceMemo = 0;
 369   1      
 370   1              //ada@0401 For DCF
 371   1              fileType = USR_FileExist(fdb);
 372   1              if ( fileType )
 373   1              {
 374   2                      //patch4.4@ada@DCF begin
 375   2                      if (USR_CheckDcfFileName(fdb) == FALSE)
 376   2                      {
 377   3                              return FALSE;
 378   3                      }
 379   2                      //patch4.4@ada@DCF end
 380   2                      
 381   2                      //patch4.5@ada@Duplicated file index in same DCF directory begin
 382   2                      //G_USR_SearchPreFileIndex = G_USR_SearchNowFileIndex;
 383   2                      //patch4.5@ada@Duplicated file index in same DCF directory end
 384   2                      
 385   2                      for (i = 4; i < 8; i++)
 386   2                      {
 387   3                              index = index * 10 + (fdb[i] - 0x30);
 388   3                      }       
 389   2                      //patch4.5.1@ada@Fix DCF file name filtering bug begin
 390   2                      if (index == 0x0000)
 391   2                      {
 392   3                              return FALSE;
 393   3                      }
 394   2                      //patch4.5.1@ada@Fix DCF file name filtering bug end
 395   2                      
 396   2                      //patch4.5@ada@Duplicated file index in same DCF directory begin
 397   2                      //Check if this file index is already doubled
 398   2                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)index) - 1) * 10 + 2),K_SDRAM_Prefetch
             -);
 399   2                      HAL_DramWordDataRead(&tmp1,&tmp2);
 400   2                      
 401   2                      if ((tmp1 == 0xff) && (tmp2 == 0xff))
 402   2                      {
 403   3                              return FALSE;
 404   3                      }
 405   2      
 406   2                      G_USR_SearchPreFileIndex = G_USR_SearchNowFileIndex;
 407   2                      G_USR_TempSearchNowFileIndex = G_USR_SearchNowFileIndex;
 408   2                      G_USR_TempLastFileIndex = G_USR_LastFileIndex;
 409   2      
 410   2                      G_USR_SearchNowFileIndex = index;
 411   2                      G_USR_LastFileIndex = index;
 412   2      
 413   2                      if (G_USR_FileCount == 0)
 414   2                      {
 415   3                              G_USR_FirstFileIndex = G_USR_SearchNowFileIndex;
 416   3                      }
 417   2                      //patch4.5@ada@Duplicated file index in same DCF directory begin
 418   2                      else
 419   2                      {
 420   3                              HAL_DramWordDataRead(&tmp1,&tmp2);
 421   3                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 10),
             -K_SDRAM_Prefetch);
 422   3                              HAL_DramWordDataRead(&tmp1,&tmp2);
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 8   

 423   3      
 424   3                              //Check if the file with same index already exist(FDB address > 0)
 425   3                              if ((tmp1 > 0) || (tmp2 > 0))
 426   3                              {
 427   4                                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 10+
             -2),K_SDRAM_Prefetch);
 428   4                                      HAL_DramWordDataRead(&tmp1,&tmp2);
 429   4                                      //Modify for same name between .jpg and .wav@wei sun 080314 begin
 430   4                                      do {
 431   5                                              if(tmp2==K_DCF_JPG_TYPE && fileType == K_DCF_WAV_TYPE)
 432   5                                              {
 433   6                                                      if(/*flag != TRUE*/1) {
 434   7                                                              //set Memo flag
 435   7                                                              return FALSE;
 436   7                                                      }
 437   6                                              }
 438   5                                              else if(tmp2==K_DCF_WAV_TYPE && fileType == K_DCF_JPG_TYPE)
 439   5                                              {
 440   6                                                      if(/*flag != TRUE*/1) {
 441   7                                                  //modify fdb table
 442   7                                                  voiceMemo = 1;
 443   7                                                  HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UIN
             -T32)index) - 1) * 10+2),K_SDRAM_Prefetch);
 444   7                                                  HAL_DramWordDataRead(&tmp1,&tmp2);
 445   7                                                  HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UIN
             -T32)index) - 1) * 10+2),K_SDRAM_NoPrefetch);
 446   7                                                  HAL_DramWordDataWrite(tmp1,K_DCF_JPG_TYPE);
 447   7                                                  return FALSE;
 448   7                                                      }
 449   6              
 450   6                                              }
 451   5      
 452   5                                              //Modify for same name between .jpg and .wav@080314 end
 453   5                                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 10
             - + 8),K_SDRAM_Prefetch);
 454   5                                              HAL_DramWordDataRead(&tmp1,&tmp2);
 455   5                                              TempPreFileIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 456   5                                              HAL_DramWordDataRead(&tmp1,&tmp2);
 457   5                                              TempNextFileIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 458   5      
 459   5                                              if (TempPreFileIndex > 0)
 460   5                                              {
 461   6                                                      //Link to the next file index
 462   6                                                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempPreFileIndex) - 1) * 10 + 9),K
             -_SDRAM_NoPrefetch);
 463   6                                                      HAL_DramWordDataWrite((UINT8)(TempNextFileIndex & 0x00ff),(UINT8)((TempNextFileIndex & 0xff00) >> 8)
             -);
 464   6                                              }
 465   5      
 466   5                                              if (TempNextFileIndex > 0)
 467   5                                              {
 468   6                                                      //Link to the previous file index
 469   6                                                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempNextFileIndex) - 1) 
             -* 10 + 8),K_SDRAM_NoPrefetch);
 470   6                                                      HAL_DramWordDataWrite((UINT8)(TempPreFileIndex & 0x00ff),(UINT8)((TempPreFileIndex & 0xff00) >> 8));
 471   6                                              }
 472   5      
 473   5                                              if (G_USR_SearchNowFileIndex == G_USR_TempLastFileIndex)
 474   5                                              {
 475   6                                                      G_USR_LastFileIndex = TempPreFileIndex;
 476   6                                              }
 477   5                                              else
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 9   

 478   5                                              {
 479   6                                                      G_USR_LastFileIndex = G_USR_TempLastFileIndex;
 480   6                                              }
 481   5              
 482   5                                              //Check if the first file index must be changed
 483   5                                              if (G_USR_SearchNowFileIndex == G_USR_FirstFileIndex)
 484   5                                              {
 485   6                                                      //Search forward for G_USR_FirstFileIndex
 486   6                                                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_FirstFileIndex) - 1) * 10 + 
             -9),K_SDRAM_Prefetch);
 487   6                                                      HAL_DramWordDataRead(&tmp1,&tmp2);
 488   6                                                      
 489   6                                                      G_USR_FirstFileIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 490   6                                              }
 491   5      
 492   5                                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) 
             -- 1) * 10 + 2),K_SDRAM_Prefetch);
 493   5                                              HAL_DramWordDataRead(&tmp1,&tmp2);
 494   5      
 495   5              
 496   5                                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) 
             -- 1) * 10),K_SDRAM_NoPrefetch);
 497   5                              // @patch5.2.1 @mattwang@ fix about hanging when SUNP0001.JPG, SUNP0002.JPG, SUNP0001.AVI
             -, SUNP0002.AVI coexist beg
 498   5                                              //for (i = 0; i < 12; i ++)
 499   5                                              for (i = 0; i < 10; i ++)
 500   5                              // @patch5.2.1 @mattwang@ fix about hanging when SUNP0001.JPG, SUNP0002.JPG, SUNP0001.AVI
             -, SUNP0002.AVI coexist end
 501   5                                              {
 502   6                                                      HAL_DramWordDataWrite(0x00,0x00);
 503   6                                              }
 504   5              
 505   5                                              //Make a marker to note that this file index is doubled
 506   5                                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 10
             - + 2),K_SDRAM_NoPrefetch);
 507   5                                              HAL_DramWordDataWrite(0xff,0xff);
 508   5              
 509   5                                              //Avoid the new file index duplicates
 510   5                                              if (G_USR_FileIndex < G_USR_SearchNowFileIndex)
 511   5                                              {
 512   6                                                      G_USR_FileIndex = G_USR_SearchNowFileIndex;
 513   6                                              }
 514   5              
 515   5                                              //Same index file follows
 516   5                                              if (G_USR_SearchNowFileIndex == G_USR_TempSearchNowFileIndex)
 517   5                                              {
 518   6                                                      //Find backward
 519   6                                                      HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_TempSearchNowFileIndex) - 1)
             - * 10 + 8),K_SDRAM_Prefetch);
 520   6                                                      HAL_DramWordDataRead(&tmp1,&tmp2);
 521   6                                                      G_USR_SearchNowFileIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 522   6                                              }
 523   5                                              else
 524   5                                              {
 525   6                                                      G_USR_SearchNowFileIndex = G_USR_TempSearchNowFileIndex;
 526   6                                              }
 527   5                                              
 528   5                                              G_USR_FileCount--;
 529   5                                              
 530   5                                              if (G_USR_FileCount == 0)
 531   5                                              {
 532   6                                                      G_USR_SearchNowFileIndex = 0;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 10  

 533   6                                              }
 534   5                                              else
 535   5                                              {
 536   6                                                      G_USR_SearchNowFileIndex = G_USR_LastFileIndex;
 537   6                                              }
 538   5              
 539   5                                              return FALSE;
 540   5                                      }while(0);
 541   4                              }
 542   3                      }
 543   2                      //patch4.5@ada@Duplicated file index in same DCF directory end
 544   2      
 545   2                // WWWW0410, Fix zero indexed file
 546   2                if ((G_USR_FileIndex < G_USR_SearchNowFileIndex) || (G_USR_SearchNowFileIndex == 0 && G_USR_File
             -Index == 0))
 547   2                {
 548   3                     G_USR_FileType = fileType;
 549   3                     G_USR_FileIndex = G_USR_SearchNowFileIndex;
 550   3                }
 551   2      
 552   2                //ada@0401 for Multi-Frame Play Back
 553   2                if (fileType == K_DCF_JPG_TYPE)
 554   2                {
 555   3      
 556   3                     //version4.0@ada@0513 for DPOF
 557   3      
 558   3                     //patch4.4@ada@DPOF begin
 559   3                     //HAL_DramStartAddrSet((K_SDRAM_DPOF3_BufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 
             -3),K_SDRAM_NoPrefetch);
 560   3                     //HAL_DramWordDataWrite(0xff,0x00);
 561   3                     //patch4.4@ada@DPOF end
 562   3      
 563   3                     //For play back JPEG file speeding-up
 564   3                     //version4.0@ada@0513 for DCF
 565   3                     //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileInde
             -x) - 1) * 3),K_SDRAM_NoPrefetch); //ada@0401
 566   3      
 567   3                              //patch4.5@ada@Record DCF file name begin
 568   3                     HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex)
             - - 1) * 10),K_SDRAM_NoPrefetch);
 569   3                     //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileInde
             -x) - 1) * 8),K_SDRAM_NoPrefetch);
 570   3                              //patch4.5@ada@Record DCF file name end
 571   3      
 572   3                     //Record file FDB logical address
 573   3                     HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAddress & 0x
             -0000ff00) >> 8));
 574   3                     HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_DOS_FdbAddr
             -ess & 0xff000000) >> 24));
 575   3      
 576   3                     //Record file attribute and file type
 577   3                     HAL_DramWordDataWrite(fdb[11],K_DCF_JPG_TYPE);
 578   3      
 579   3                     //Record file starting cluster
 580   3                     HAL_DramWordDataWrite(fdb[26],fdb[27]);
 581   3      
 582   3                     //Record file size in bytes
 583   3                     HAL_DramWordDataWrite(fdb[28],fdb[29]);
 584   3                     HAL_DramWordDataWrite(fdb[30],fdb[31]);
 585   3      
 586   3                      //patch4.5@ada@Record DCF file name begin
 587   3                      //Record DCF file name
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 11  

 588   3                      for (i = 0; i < 2; i++)
 589   3                      {
 590   4                              HAL_DramWordDataWrite(fdb[i * 2],fdb[i * 2 + 1]);
 591   4                      }
 592   3                              //patch4.5@ada@Record DCF file name end
 593   3                      //phil add for voice memo s
 594   3                      if (voiceMemo) {
 595   4                              return FALSE;
 596   4                      }
 597   3                      //phil add for voice memo e
 598   3                     //patch4.3@ada@0618 for playback file index order
 599   3                     if (G_USR_FileCount)
 600   3                     {
 601   4                          if (G_USR_SearchNowFileIndex > G_USR_SearchPreFileIndex)
 602   4                          {
 603   5                               //Record previous file index(No matter JPG or AVI or WAV)
 604   5                               HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_USR_S
             -earchPreFileIndex & 0xff00) >> 8));
 605   5                               HAL_DramWordDataWrite(0x00,0x00);
 606   5      
 607   5                                              //patch4.5@ada@Record DCF file name begin
 608   5                               HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchPre
             -FileIndex) - 1) * 10 + 9),K_SDRAM_NoPrefetch);
 609   5                               //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)G_USR_SearchP
             -reFileIndex) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 610   5                                              //patch4.5@ada@Record DCF file name end
 611   5      
 612   5                               HAL_DramWordDataWrite((UINT8)(G_USR_SearchNowFileIndex & 0x00ff),(UINT8)((G_USR_S
             -earchNowFileIndex & 0xff00) >> 8));
 613   5                          }
 614   4                          else
 615   4                          {
 616   5                               NowIndex = G_USR_SearchNowFileIndex;
 617   5                               PreIndex = G_USR_SearchPreFileIndex;
 618   5                               //G_USR_SearchNowFileIndex = PreIndex;mark for decreasing monut time 
 619   5                               G_USR_LastFileIndex = PreIndex;
 620   5      
 621   5                               //patch4.4@ada@DPOF skip AVI & WAV begin
 622   5      
 623   5                                              //patch4.4.1@ada@Fix DPOF bug begin
 624   5                               //G_USR_LastJpgFileIndex = PreIndex;
 625   5                                              //patch4.4.1@ada@Fix DPOF bug end
 626   5      
 627   5                               //patch4.4@ada@DPOF skip AVI & WAV end
 628   5      
 629   5                               do
 630   5                               {
 631   6                                    TempNowIndex = PreIndex;
 632   6      
 633   6                                                      //patch4.5@ada@Record DCF file name begin
 634   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)PreIndex) 
             -- 1) * 10 + 8),K_SDRAM_Prefetch);
 635   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)PreIndex
             -) - 1) * 8 + 6),K_SDRAM_Prefetch);
 636   6                                                      //patch4.5@ada@Record DCF file name end
 637   6      
 638   6                                    HAL_DramWordDataRead(&tmp1,&tmp2);
 639   6                                    PreIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 640   6                                    HAL_DramWordDataRead(&tmp1,&tmp2);
 641   6                                    NextIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 642   6                               } while (NowIndex < PreIndex);
 643   5      
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 12  

 644   5                               if (PreIndex > 0)
 645   5                               {
 646   6                                                      //patch4.5@ada@Record DCF file name begin
 647   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)PreIndex) 
             -- 1) * 10 + 9),K_SDRAM_NoPrefetch);
 648   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)PreIndex
             -) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 649   6                                                      //patch4.5@ada@Record DCF file name end
 650   6      
 651   6                                    HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0xff00)
             - >> 8));
 652   6      
 653   6                                                      //patch4.5@ada@Record DCF file name begin
 654   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)NowIndex) 
             -- 1) * 10 + 8),K_SDRAM_NoPrefetch);
 655   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)NowIndex
             -) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 656   6                                                      //patch4.5@ada@Record DCF file name end
 657   6      
 658   6                                    HAL_DramWordDataWrite((UINT8)(PreIndex & 0x00ff),(UINT8)((PreIndex & 0xff00)
             - >> 8));
 659   6                                    HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((TempNowIndex &
             - 0xff00) >> 8));
 660   6      
 661   6                                                      //patch4.5@ada@Record DCF file name begin
 662   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempNowInd
             -ex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 663   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempNowI
             -ndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 664   6                                                      //patch4.5@ada@Record DCF file name end
 665   6      
 666   6                                    HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0xff00)
             - >> 8));
 667   6                               }
 668   5                               else
 669   5                               {
 670   6                                                      //patch4.5@ada@Record DCF file name begin
 671   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)NowIndex) 
             -- 1) * 10 + 8),K_SDRAM_NoPrefetch);
 672   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)NowIndex
             -) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 673   6                                                      //patch4.5@ada@Record DCF file name end
 674   6      
 675   6                                    HAL_DramWordDataWrite(0x00,0x00);
 676   6                                    HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((TempNowIndex &
             - 0xff00) >> 8));
 677   6      
 678   6                                                      //patch4.5@ada@Record DCF file name begin
 679   6                                    HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempNowInd
             -ex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 680   6                                    //HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)TempNowI
             -ndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 681   6                                                      //patch4.5@ada@Record DCF file name end
 682   6      
 683   6                                    HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0xff00)
             - >> 8));
 684   6      
 685   6                                    G_USR_FirstFileIndex = NowIndex;
 686   6                               }
 687   5                          }
 688   4                     }
 689   3                }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 13  

 690   2                else
 691   2                {
 692   3                     if (fileType == K_DCF_AVI_TYPE || fileType == K_DCF_WGI_TYPE )
 693   3                     {
 694   4                          //For play back AVI file speeding-up
 695   4                          //version4.0@ada@0513 for DCF
 696   4                          //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFil
             -eIndex) - 1) * 3),K_SDRAM_NoPrefetch); //ada@0401
 697   4      
 698   4                                      //patch4.5@ada@Record DCF file name begin
 699   4                          HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileI
             -ndex) - 1) * 10),K_SDRAM_NoPrefetch);
 700   4                          //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFil
             -eIndex) - 1) * 8),K_SDRAM_NoPrefetch);
 701   4                                      //patch4.5@ada@Record DCF file name end
 702   4      
 703   4                          //Record file FDB logical address
 704   4                          HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAddress
             - & 0x0000ff00) >> 8));
 705   4                          HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_DOS_Fd
             -bAddress & 0xff000000) >> 24));
 706   4                          //Record file attribute and file type
 707   4                          HAL_DramWordDataWrite(fdb[11],fileType);
 708   4                          //Record file starting cluster
 709   4                          HAL_DramWordDataWrite(fdb[26],fdb[27]);
 710   4                          //Record file size in bytes
 711   4                          HAL_DramWordDataWrite(fdb[28],fdb[29]);
 712   4                          HAL_DramWordDataWrite(fdb[30],fdb[31]);
 713   4      
 714   4                                      //patch4.5@ada@Record DCF file name begin
 715   4                                      //Record DCF file name
 716   4                                      for (i = 0; i < 2; i++)
 717   4                                      {
 718   5                              HAL_DramWordDataWrite(fdb[i * 2],fdb[i * 2 + 1]);
 719   5                                      }
 720   4                                      //patch4.5@ada@Record DCF file name end
 721   4      
 722   4                          //Record previous file index(No matter JPG or AVI or WAV)
 723   4      
 724   4                                      //patch4.4.1@ada@Fix DCF bug begin
 725   4                          //HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_USR_Sear
             -chPreFileIndex & 0xff00) >> 8));
 726   4                          //HAL_DramWordDataWrite(0x00,0x00);
 727   4                                      //patch4.4.1@ada@Fix DCF bug end
 728   4      
 729   4                          //patch4.3@ada@0618 for playback file index order
 730   4                          if (G_USR_FileCount)
 731   4                          {
 732   5                               if (G_USR_SearchNowFileIndex > G_USR_SearchPreFileIndex)
 733   5                               {
 734   6                                    //Record previous file index(No matter JPG or AVI or WAV)
 735   6                                    HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_
             -USR_SearchPreFileIndex & 0xff00) >> 8));
 736   6                                    HAL_DramWordDataWrite(0x00,0x00);
 737   6      
 738   6                                                      //patch4.5@ada@Record DCF file name begin
 739   6                                    HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_Sear
             -chPreFileIndex) - 1) * 10 + 9),K_SDRAM_NoPrefetch);
 740   6                                    //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_Se
             -archPreFileIndex) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 741   6                                                      //patch4.5@ada@Record DCF file name end
 742   6      
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 14  

 743   6                                    HAL_DramWordDataWrite((UINT8)(G_USR_SearchNowFileIndex & 0x00ff),(UINT8)((G_
             -USR_SearchNowFileIndex & 0xff00) >> 8));
 744   6                               }
 745   5                               else
 746   5                               {
 747   6                                    NowIndex = G_USR_SearchNowFileIndex;
 748   6                                    PreIndex = G_USR_SearchPreFileIndex;
 749   6                                    //G_USR_SearchNowFileIndex = PreIndex;mark for decreasing monut time
 750   6                                    G_USR_LastFileIndex = PreIndex;
 751   6      
 752   6                                    do
 753   6                                    {
 754   7                                         TempNowIndex = PreIndex;
 755   7      
 756   7                                                              //patch4.5@ada@Record DCF file name begin
 757   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)PreIn
             -dex) - 1) * 10 + 8),K_SDRAM_Prefetch);
 758   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Pre
             -Index) - 1) * 8 + 6),K_SDRAM_Prefetch);
 759   7                                                              //patch4.5@ada@Record DCF file name end
 760   7      
 761   7                                         HAL_DramWordDataRead(&tmp1,&tmp2);
 762   7                                         PreIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 763   7                                         HAL_DramWordDataRead(&tmp1,&tmp2);
 764   7                                         NextIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 765   7                                    } while (NowIndex < PreIndex);
 766   6      
 767   6                                    if (PreIndex > 0)
 768   6                                    {
 769   7                                                              //patch4.5@ada@Record DCF file name begin
 770   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)PreIn
             -dex) - 1) * 10 + 9),K_SDRAM_NoPrefetch);
 771   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Pre
             -Index) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 772   7                                                              //patch4.5@ada@Record DCF file name end
 773   7      
 774   7                                         HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0x
             -ff00) >> 8));
 775   7      
 776   7                                                              //patch4.5@ada@Record DCF file name begin
 777   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)NowIn
             -dex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 778   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Now
             -Index) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 779   7                                                              //patch4.5@ada@Record DCF file name end
 780   7      
 781   7                                         HAL_DramWordDataWrite((UINT8)(PreIndex & 0x00ff),(UINT8)((PreIndex & 0x
             -ff00) >> 8));
 782   7                                         HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((TempNowIn
             -dex & 0xff00) >> 8));
 783   7      
 784   7                                                              //patch4.5@ada@Record DCF file name begin
 785   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)TempN
             -owIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 786   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Tem
             -pNowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 787   7                                                              //patch4.5@ada@Record DCF file name end
 788   7      
 789   7                                         HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0x
             -ff00) >> 8));
 790   7                                    }
 791   6                                    else
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 15  

 792   6                                    {
 793   7                                                              //patch4.5@ada@Record DCF file name begin
 794   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)NowIn
             -dex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 795   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Now
             -Index) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 796   7                                                              //patch4.5@ada@Record DCF file name end
 797   7      
 798   7                                         HAL_DramWordDataWrite(0x00,0x00);
 799   7                                         HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((TempNowIn
             -dex & 0xff00) >> 8));
 800   7      
 801   7                                                              //patch4.5@ada@Record DCF file name begin
 802   7                                         HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)TempN
             -owIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 803   7                                         //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)Tem
             -pNowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 804   7                                                              //patch4.5@ada@Record DCF file name end
 805   7      
 806   7                                         HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex & 0x
             -ff00) >> 8));
 807   7      
 808   7                                         G_USR_FirstFileIndex = NowIndex;
 809   7                                    }
 810   6                               }
 811   5                          }
 812   4                     }
 813   3                     else
 814   3                     {
 815   4                          if (fileType == K_DCF_WAV_TYPE)
 816   4                          {
 817   5                               //For play back AVI file speeding-up
 818   5                               //version4.0@ada@0513 for DCF
 819   5                               //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)G_USR_SearchN
             -owFileIndex) - 1) * 3),K_SDRAM_NoPrefetch); //ada@0401
 820   5      
 821   5                                              //patch4.5@ada@Record DCF file name begin
 822   5                               HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)G_USR_SearchNow
             -FileIndex) - 1) * 10),K_SDRAM_NoPrefetch); //ada@0401
 823   5                               //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)G_USR_SearchN
             -owFileIndex) - 1) * 8),K_SDRAM_NoPrefetch); //ada@0401
 824   5                                              //patch4.5@ada@Record DCF file name end
 825   5      
 826   5                               //Record file FDB logical address
 827   5                               HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAd
             -dress & 0x0000ff00) >> 8));
 828   5                               HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_D
             -OS_FdbAddress & 0xff000000) >> 24));
 829   5      
 830   5                               //Record file attribute and file type
 831   5                               HAL_DramWordDataWrite(fdb[11],K_DCF_WAV_TYPE);
 832   5      
 833   5                               //Record file starting cluster
 834   5                               HAL_DramWordDataWrite(fdb[26],fdb[27]);
 835   5      
 836   5                               //Record file size in bytes
 837   5                               HAL_DramWordDataWrite(fdb[28],fdb[29]);
 838   5                               HAL_DramWordDataWrite(fdb[30],fdb[31]);
 839   5      
 840   5                                              //patch4.5@ada@Record DCF file name begin
 841   5                                              //Record DCF file name
 842   5                                              for (i = 0; i < 2; i++)
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 16  

 843   5                                              {
 844   6                                      HAL_DramWordDataWrite(fdb[i * 2],fdb[i * 2 + 1]);
 845   6                                              }
 846   5                                              //patch4.5@ada@Record DCF file name end
 847   5      
 848   5                                              //patch4.4.1@ada@Fix DCF bug begin
 849   5                               //Record previous file index(No matter JPG or AVI or WAV)
 850   5                               //HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_USR
             -_SearchPreFileIndex & 0xff00) >> 8));
 851   5                               //HAL_DramWordDataWrite(0x00,0x00);
 852   5                                              //patch4.4.1@ada@Fix DCF bug end
 853   5      
 854   5                               //patch4.3@ada@0618 for playback file index order
 855   5                               if (G_USR_FileCount)
 856   5                               {
 857   6                                    if (G_USR_SearchNowFileIndex > G_USR_SearchPreFileIndex)
 858   6                                    {
 859   7                                         //Record previous file index(No matter JPG or AVI or WAV)
 860   7                                         HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8
             -)((G_USR_SearchPreFileIndex & 0xff00) >> 8));
 861   7                                         HAL_DramWordDataWrite(0x00,0x00);
 862   7      
 863   7                                                              //patch4.5@ada@Record DCF file name begin
 864   7                                         HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)G_USR
             -_SearchPreFileIndex) - 1) * 10 + 9),K_SDRAM_NoPrefetch);
 865   7                                         //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)G_U
             -SR_SearchPreFileIndex) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 866   7                                                              //patch4.5@ada@Record DCF file name end
 867   7      
 868   7                                         HAL_DramWordDataWrite((UINT8)(G_USR_SearchNowFileIndex & 0x00ff),(UINT8
             -)((G_USR_SearchNowFileIndex & 0xff00) >> 8));
 869   7                                    }
 870   6                                    else
 871   6                                    {
 872   7                                         NowIndex = G_USR_SearchNowFileIndex;
 873   7                                         PreIndex = G_USR_SearchPreFileIndex;
 874   7                                         G_USR_SearchNowFileIndex = PreIndex;
 875   7                                         G_USR_LastFileIndex = PreIndex;
 876   7      
 877   7                                         do
 878   7                                         {
 879   8                                              TempNowIndex = PreIndex;
 880   8      
 881   8                                                                      //patch4.5@ada@Record DCF file name begin
 882   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -PreIndex) - 1) * 10 + 8),K_SDRAM_Prefetch);
 883   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
             -2)PreIndex) - 1) * 8 + 6),K_SDRAM_Prefetch);
 884   8                                                                      //patch4.5@ada@Record DCF file name end
 885   8      
 886   8                                              HAL_DramWordDataRead(&tmp1,&tmp2);
 887   8                                              PreIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 888   8                                              HAL_DramWordDataRead(&tmp1,&tmp2);
 889   8                                              NextIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
 890   8                                         } while (NowIndex < PreIndex);
 891   7      
 892   7                                         if (PreIndex > 0)
 893   7                                         {
 894   8                                                                      //patch4.5@ada@Record DCF file name begin
 895   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -PreIndex) - 1) * 10 + 9),K_SDRAM_NoPrefetch);
 896   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 17  

             -2)PreIndex) - 1) * 8 + 7),K_SDRAM_NoPrefetch);
 897   8                                                                      //patch4.5@ada@Record DCF file name end
 898   8      
 899   8                                              HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex
             - & 0xff00) >> 8));
 900   8      
 901   8                                                                      //patch4.5@ada@Record DCF file name begin
 902   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -NowIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 903   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
             -2)NowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 904   8                                                                      //patch4.5@ada@Record DCF file name end
 905   8      
 906   8                                              HAL_DramWordDataWrite((UINT8)(PreIndex & 0x00ff),(UINT8)((PreIndex
             - & 0xff00) >> 8));
 907   8                                              HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((Temp
             -NowIndex & 0xff00) >> 8));
 908   8      
 909   8                                                                      //patch4.5@ada@Record DCF file name begin
 910   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -TempNowIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 911   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
             -2)TempNowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 912   8                                                                      //patch4.5@ada@Record DCF file name end
 913   8      
 914   8                                              HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex
             - & 0xff00) >> 8));
 915   8                                         }
 916   7                                         else
 917   7                                         {
 918   8                                                                      //patch4.5@ada@Record DCF file name begin
 919   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -NowIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 920   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
             -2)NowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 921   8                                                                      //patch4.5@ada@Record DCF file name end
 922   8      
 923   8                                              HAL_DramWordDataWrite(0x00,0x00);
 924   8                                              HAL_DramWordDataWrite((UINT8)(TempNowIndex & 0x00ff),(UINT8)((Temp
             -NowIndex & 0xff00) >> 8));
 925   8      
 926   8                                                                      //patch4.5@ada@Record DCF file name begin
 927   8                                              HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT32)
             -TempNowIndex) - 1) * 10 + 8),K_SDRAM_NoPrefetch);
 928   8                                              //HAL_DramStartAddrSet((K_SDRAM_WAV_FdbParameterBufAddr + (((UINT3
             -2)TempNowIndex) - 1) * 8 + 6),K_SDRAM_NoPrefetch);
 929   8                                                                      //patch4.5@ada@Record DCF file name end
 930   8      
 931   8                                              HAL_DramWordDataWrite((UINT8)(NowIndex & 0x00ff),(UINT8)((NowIndex
             - & 0xff00) >> 8));
 932   8      
 933   8                                              G_USR_FirstFileIndex = NowIndex;
 934   8                                         }
 935   7                                    }
 936   6                               }
 937   5                          }
 938   4                     }
 939   3                }
 940   2      
 941   2              G_USR_FileCount++;
 942   2              return TRUE;    
 943   2           }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 18  

 944   1      }
 945          
 946          UINT8 USR_IsOurBaseName(UINT8* name) USING_0
 947          {
 948   1              if (((name[0]  == G_USR_Company_UpperSIG[0]) || (name[0]  == G_USR_Company_LowerSIG[0])) &&
 949   1                  ((name[1]  == G_USR_Company_UpperSIG[1]) || (name[1]  == G_USR_Company_LowerSIG[1])) &&
 950   1                  ((name[2]  == G_USR_Company_UpperSIG[2]) || (name[2]  == G_USR_Company_LowerSIG[2])) &&
 951   1                  ((name[3]  == G_USR_Company_UpperSIG[3]) || (name[3]  == G_USR_Company_LowerSIG[3])) )
 952   1                      return TRUE;
 953   1              else
 954   1                      return FALSE;
 955   1      }
 956          
 957          #if 0
              UINT8 USR_IsJpgExt(UINT8* name) USING_0
              {
                      if (    ((name[8]  == 'J') || (name[8]  == 'j')) &&
                              ((name[9]  == 'P') || (name[9]  == 'p')) &&
                              ((name[10] == 'G') || (name[10] == 'g')) )
                              return TRUE;
                      else
                              return FALSE;
              }
              #endif
 968          
 969          UINT8 USR_IsSameStr(UINT8*str1, UINT8*str2, UINT16 len) USING_0
 970          {
 971   1              UINT16    k;
 972   1      
 973   1              for ( k = 0; k < len; k++ )
 974   1              {
 975   2                      if ( str1[k] != str2[k] )
 976   2                              return FALSE;
 977   2              }
 978   1      
 979   1              return TRUE;
 980   1      }
 981          
 982          //#if ( AUDIO_OPTION == 1 )
 983          #if 0
              UINT8 USR_IsWaveExt(UINT8* name) USING_0
              {
                      if (    ((name[8]  == 'W') || (name[8]  == 'w')) &&
                              ((name[9]  == 'A') || (name[9]  == 'a')) &&
                              ((name[10] == 'V') || (name[10] == 'v')) )
                              return TRUE;
                      else
                              return FALSE;
              }
              #endif
 994          
 995          //#endif
 996          
 997          #if ( K_File_HaveVideo == 1 )
 998          
 999          #if 0
              UINT8 USR_IsAviExt(UINT8* name) USING_0
              {
                      if (    ((name[8]  == 'A') || (name[8]  == 'a')) &&
                              ((name[9]  == 'V') || (name[9]  == 'v')) &&
                              ((name[10] == 'I') || (name[10] == 'i')) )
                              return TRUE;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 19  

                      else
                              return FALSE;
              }
              #endif
1010          
1011          #if 0
              UINT8 USR_IsWGIExt(UINT8* name) USING_0
              {
                      if (    ((name[8]  == 'W') || (name[8]  == 'w')) &&
                              ((name[9]  == 'G') || (name[9]  == 'g')) &&
                              ((name[10] == 'I') || (name[10] == 'i')) )
                              return TRUE;
                      else
                              return FALSE;
              }
              
              #endif
1023          
1024          #endif
1025          
1026          UINT8* dcfStrToUpper(UINT8 *str)
1027          {       
1028   1              UINT8 *p = str;
1029   1              
1030   1              while(*str != '\0'){
1031   2                      *str = *str -32;
1032   2                      str++;
1033   2              }
1034   1              return p;
1035   1      }
1036          
1037          UINT8 USR_IsOurFileExt(UINT8 *name,MediaType_e opt)
1038          {
1039   1              UINT8 fileExt[3]={'\0','\0','\0'};
1040   1              
1041   1              switch( opt ){
1042   2                      case MEDIA_AVI:
1043   2                              fileExt[0] = 'a';
1044   2                              fileExt[1] = 'v';
1045   2                              fileExt[2] = 'i';
1046   2                      break;
1047   2                      case MEDIA_JPG:
1048   2                              fileExt[0] = 'j';
1049   2                              fileExt[1] = 'p';
1050   2                              fileExt[2] = 'g';
1051   2                      break;
1052   2                      case MEDIA_WAV:
1053   2                              fileExt[0] = 'w';
1054   2                              fileExt[1] = 'a';
1055   2                              fileExt[2] = 'v';
1056   2                      break;
1057   2                      case MEDIA_TLS:
1058   2                              fileExt[0] = 'w';
1059   2                              fileExt[1] = 'g';
1060   2                              fileExt[2] = 'i';
1061   2                      break;
1062   2              }
1063   1      
1064   1              if((!strncmp(name+8,fileExt,3)) || (!strncmp(name+8,dcfStrToUpper(fileExt),3))){
1065   2                      return TRUE;
1066   2              }
1067   1              else{
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 20  

1068   2                      return FALSE;
1069   2              }
1070   1      }
1071          
1072          //patch4.4@ada@MP3 begin
1073          //patch4.4@ada@MP3 end
1074          
1075          //-----------------------------------------------------------------------------
1076          //USR_IsOurFile
1077          //-----------------------------------------------------------------------------
1078          UINT8 USR_IsOurFile(UINT8 *name) USING_0
1079          {
1080   1              UINT8    match = FALSE;
1081   1      
1082   1              if ( USR_IsOurBaseName(name) )
1083   1              {
1084   2                     match = USR_CheckExtType(name);
1085   2              }
1086   1      
1087   1              return match;
1088   1      }
1089          
1090          //-----------------------------------------------------------------------------
1091          //USR_FileExist
1092          //-----------------------------------------------------------------------------
1093          //patch3.2@ada@0401 For DCF
1094          UINT8 USR_FileExist(UINT8 *fdb)
1095          {
1096   1           UINT8 match = FALSE;
1097   1      
1098   1           //version4.0@ada@0513 for DCF                           //Long File Name
1099   1           if ((fdb[0] != 0xe5) && (fdb[0] != 0x2e) && (fdb[11] != 0x0f))
1100   1           {
1101   2                match = USR_CheckExtType(fdb);
1102   2           }
1103   1      
1104   1           return match;
1105   1      }
1106          #if 0
              UINT8 USR_SearchMediaFolder(void)
              {
                      UINT8 i, ch, DevId;
                      UINT16  rem;
                      UINT8 dirName[12] = "999MEDIA";
                      UINT32 sts;
              
                      G_USR_MaxDir1Count = 999;
                      //G_USR_Dir1Count = 0;
                      sts = TRUE;
                      while((sts != DOS_SUCCESS) && ( G_USR_MaxDir1Count > 100 )){
                              for (i = 2; i != 0xff ; i--)
                              {
                                      ch = (UINT8) (rem % 10) + '0';
                                      rem /= 10;
                                      dirName[i] = ch;
                              }                
                              dirName[8]  = '\0';
                              sts = DIR_SearchName(dirName);
                              if (sts == DOS_SUCCESS){
                                      //G_USR_TotalDirectory++;
                                      printf("Found DIR=%s\n",dirName);
                                      printf("G_USR_MaxDir1Count=%u\n",G_USR_MaxDir1Count);
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 21  

                                      return DOS_SUCCESS;
                              }
                              else{
                                      //printf("DIR=%s\n",dirName);
                                      G_USR_MaxDir1Count --;
                                      //G_USR_Dir1Count ;
                                      rem = G_USR_Dir1Count;
                              }
                      }
                      return sts;
              }
              #endif
1142          UINT8 USR_CheckMediaFolder(UINT8 *name)
1143          {
1144   1              UINT8 i, ch;
1145   1              UINT16  rem;
1146   1      
1147   1              if(G_USR_MaxDir1Count >= 999){
1148   2                      return FALSE;
1149   2              }
1150   1              
1151   1              G_USR_MaxDir1Count ++;
1152   1              rem = G_USR_MaxDir1Count;
1153   1              //printf("rem=%u\n",rem);
1154   1              for (i = 2; i != 0xff ; i--)
1155   1              {
1156   2                      ch = (UINT8) (rem % 10) + '0';
1157   2                      rem /= 10;
1158   2                      //printf("ch=%bx\n",ch);
1159   2                      name[i] = ch;
1160   2              }                
1161   1              name[8]  = '\0';
1162   1              if( DIR_Change("..") != DOS_SUCCESS ) return FALSE; 
1163   1              return TRUE;
1164   1      }
1165          
1166          UINT16 dcfGetCurrFolderMaxFileIndex(UINT8 DevId)
1167          {
1168   1              UINT32 cluster;
1169   1              UINT8 SectorNum, SectorNum2;
1170   1              UINT32 SectorStart;
1171   1              x86_FDB *pfdb;
1172   1              xdata DISK *disk;
1173   1              UINT8  find;
1174   1              UINT8 num1,num3;
1175   1              UINT8 string[5] = "0000";
1176   1              UINT32 dramAddr;
1177   1      
1178   1              disk      = (DISK *)&dos.disk[DevId];
1179   1              cluster   = dos.FDB_DataValid ? dos.FDB_CurrCluster : disk->CurrDirStartCluster;
1180   1              SectorNum = (cluster < 2) ? (disk->RootEntries>>4) : disk->Cluster2Sector;
1181   1              SectorNum2 = (SectorNum>>1);
1182   1      
1183   1              SectorStart = FAT_Cluster2Sector(DevId, cluster);
1184   1              find = FIND_FILE_OK;
1185   1      
1186   1              HAL_DmaSetSramAddr(0x0000);
1187   1              do
1188   1              {
1189   2                      DOS_SectorRead(DevId, SectorStart, SectorNum, dos.TmpBufAddr);
1190   2                      dramAddr = dos.TmpBufAddr;
1191   2                      for(num3=0;num3 < SectorNum2;num3++)
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 22  

1192   2                      {
1193   3                              HAL_DmaSetDramAddr(dramAddr);
1194   3                              HAL_DmaDo(0,1,1024,0,0);
1195   3                              pfdb=(x86_FDB*)G_ucStorData;
1196   3      
1197   3                              for(num1=0;num1<32;num1++)//read two sector one time
1198   3                              {
1199   4                                      if(pfdb->name[0] == 0)
1200   4                                      {
1201   5                                              find = FIND_FILE_FAIL;
1202   5                                              break;
1203   5                                      }
1204   4                                      else if(pfdb->name[0] != 0xe5)
1205   4                                      {
1206   5                                              if (!(strncmp(&pfdb->name[4], string, 4)&0x80)) 
1207   5                                              {
1208   6                                                      memcpy(string, &pfdb->name[4], 4);
1209   6                                              }                               
1210   5                                      }
1211   4                                      pfdb++;
1212   4                              }
1213   3                              dramAddr+= 512;//tow sector add
1214   3                      }
1215   2              
1216   2                      cluster = FAT_TableRead(DevId, cluster);//get next cluster
1217   2                      if((cluster & disk->FAT_EOFValue) == disk->FAT_EOFValue)// FDB End of this Directory
1218   2                      {
1219   3                              find = FIND_FILE_FAIL;
1220   3                              break;
1221   3                      }
1222   2                      dos.FDB_CurrCluster = cluster;
1223   2                      SectorStart = FAT_Cluster2Sector(DevId, cluster);
1224   2              }while(find == FIND_FILE_OK);
1225   1      
1226   1              G_USR_FileIndex= strtoul(string, NULL, 10);
1227   1      
1228   1              if(G_USR_FileIndex > 9999)
1229   1              {
1230   2                      G_USR_FileIndex = 0;
1231   2              }
1232   1              return G_USR_FileIndex;
1233   1      }
1234          
1235          //-----------------------------------------------------------------------------
1236          //dcfFileInitialize
1237          //-----------------------------------------------------------------------------
1238          //patch3.2@ada@0401 for Multi-Frame Play Back
1239          //patch3.2@ada@0401 for DCF
1240          UINT8 dcfFileInitialize(void)
1241          {
1242   1              UINT8 sts = TRUE;
1243   1              UINT8 DevId, ret;
1244   1              UINT32 i;
1245   1              FDB fdb;
1246   1              x86_FDB *pfdb;
1247   1              pfdb  = (x86_FDB *)&dos.fdb;
1248   1              USR_ResetDramFdbParameterArea();
1249   1      
1250   1              M_DOS_ClearError();
1251   1      
1252   1          //initialization
1253   1          G_USR_FileType = 0x00;      //0x00: NON_SPECIFIC
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 23  

1254   1          G_USR_FileIndex = 0;
1255   1          G_USR_FileCount = 0;
1256   1      
1257   1      
1258   1          G_USR_SearchPreFileIndex = 0;
1259   1          G_USR_SearchNowFileIndex = 0;
1260   1          G_USR_SearchNextFileIndex = 0;
1261   1      
1262   1              G_USR_FirstFileIndex = 0;
1263   1      
1264   1              DevId = DOS_CurrDriverGet();
1265   1              DIR_SearchReset();
1266   1              i = 0;
1267   1              //printf("K_SDRAM_JPG_FdbParameterBufAddr=%lx\n",K_SDRAM_JPG_FdbParameterBufAddr);
1268   1              G_DOS_StartClusterNumber = 0;
1269   1              if(dcfQuickInitStsGet())
1270   1              {
1271   2                      dcfGetCurrFolderMaxFileIndex(DevId);
1272   2              }
1273   1              else
1274   1              {
1275   2                      while(1) 
1276   2                      {
1277   3      
1278   3                              ret = DIR_Search(DevId, "*", (FDB *)&fdb, FILE_INFO_GET_SIZE); //fdb.size valid
1279   3      
1280   3                              if(ret==FIND_FILE_FAIL) //can't find more file
1281   3                                      break;
1282   3                              if(ret==FIND_FILE_OK) {
1283   4                                      if(fdb.start && USR_FileExist((UINT8 *)pfdb)){// xian fix #29328,#29334
1284   5                                              G_DOS_StartClusterNumber = fdb.FDB_Sector;
1285   5                                              G_DOS_FdbAddress = ((UINT32)fdb.FDB_Sector << 4) + (fdb.FDB_Idx);////mantis-26979 
1286   5                                              USR_CheckType((UINT8 *)pfdb);  //xian: alg. of inserting link table maybe slow
1287   5                                              //dcfFileDramFdbParameterWrite();
1288   5                                              //printf("%s FDB_Sector=%lx, G_DOS_FdbAddress=%lx attr=%bu\n",pfdb->name,fdb.FDB_Sector,G_DOS_FdbAddr
             -ess,fdb.attr);
1289   5                                              //printf("%s\n",pfdb->name);
1290   5                                              //printf("1 G_USR_FileIndex=%u\n",G_USR_FileIndex);
1291   5                                              //printf("2 G_USR_FileCount=%u\n",G_USR_FileCount);
1292   5                                              //printf("G_USR_FileType=%x\n",G_USR_FileType);
1293   5                                              i ++;
1294   5                                      }
1295   4                                      else if(fdb.attr==ATTR_A &&(strncmp(fdb.name, "AAAAAAAAAAA", 11) == 0 ||
1296   4                                              strncmp(fdb.name, "BBBBBBBBBBB", 11) == 0 ||(fdb.size==0))){
1297   5                                              DOS_FileDel(fdb.name);  //fix #33721
1298   5                                      }              
1299   4                                      #if 0
                                              else{
                                                      printf("%s\n",fdb.name);
                                              }
                                              #endif
1304   4                              }
1305   3                              dbgWdtFeed(10000);      //for #40931
1306   3                      }
1307   2      
1308   2              }
1309   1              G_USR_FileIndex++;  //next file index
1310   1              printf("G_USR_FileIndex=%u, %lu\n",G_USR_FileIndex, i);
1311   1              return sts;
1312   1      }
1313          
1314          UINT8 USR_DcfFdbAddrSet(UINT8 fno)
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 24  

1315          {
1316   1              xdata FILE * file;
1317   1              file  = (FILE *)&dos.file[fno];
1318   1              //Add for Host quick DCF
1319   1              G_DOS_StartClusterNumber = (UINT16)file->FirstCluster;
1320   1              G_DOS_FdbAddress = (file->FDB_Sector << 4) + (file->FDB_Idx);//mantis-26979
1321   1              G_DOS_FileAttribute = file->fdb.attr; //fixed mantis-26368 0n 20080620
1322   1              //printf("G_DOS_FileAttribute=%bx,G_USR_FileIndex=%x,file->FDB_Idx=%bx\n",G_DOS_FileAttribute,G_USR_FileI
             -ndex,file->FDB_Idx);
1323   1              //printf("G_DOS_FdbAddress=%lx\n",G_DOS_FdbAddress);
1324   1              return TRUE;
1325   1      }
1326          
1327          //-----------------------------------------------------------------------------
1328          //USR_MatchFdb
1329          //-----------------------------------------------------------------------------
1330          //patch3.2@ada@0401 for DPOF
1331          //version4.0@ada@0513 for DCF
1332          UINT8 USR_MatchFdb(UINT8 matchCond, UINT8 *fdb, UINT32 refCon) USING_0
1333          {
1334   1              UINT8 match = FALSE;
1335   1      
1336   1              //ada@0418
1337   1              //UINT8 i;
1338   1              UINT16 index = 0;
1339   1      
1340   1              switch ( matchCond )
1341   1              {
1342   2                      case K_DCF_MatchIndexName:
1343   2                              // match sunpxxxx.avi, sunpxxxx.jpg
1344   2                              match = USR_MatchIndexName(fdb,refCon);
1345   2      
1346   2                              if (match)
1347   2                              {
1348   3                                      // WWWW0410, Fix delete last bug
1349   3                                G_USR_FileType = match = USR_CheckExtType(fdb);
1350   3                          }
1351   2      
1352   2                              break;
1353   2      
1354   2                      case K_DCF_MatchOurFile:
1355   2                              // WWWW0410, Fix delete last bug
1356   2                              G_USR_FileType = match = USR_IsOurFile(fdb);
1357   2                              if (refCon)
1358   2                              {
1359   3                                      if ( match != refCon )
1360   3                                              match = FALSE;
1361   3                              }
1362   2                              break;
1363   2      
1364   2                      //version4.0@ada@0513 for DCF
1365   2                      case K_DCF_ALL_DCF_FILE:
1366   2                              // @patch4.5@wyeo@fix delete all bug, begin
1367   2                                      // empty fdb    deleted file    read only, hidden, system, label, directory
1368   2                              if (    fdb[0] == 0 || fdb[0] == 0xe5 || ((fdb[11] & 0x1f)!=0x00) || \
1369   2                                      // long file name
1370   2                                      (fdb[11] == 0x0F && fdb[12] == 0x00))
1371   2                              {
1372   3                                      match = FALSE;
1373   3                              }
1374   2                              else
1375   2                              {
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 25  

1376   3                              G_USR_FileType = match = USR_CheckExtType(fdb);
1377   3                              if (G_USR_FileType == 0)
1378   3                                      match = FALSE;
1379   3                              else
1380   3                                      match = TRUE;
1381   3      
1382   3                              //patch5.1@ada@Not delete the files with duplicated file index begin
1383   3                              if (match == TRUE)
1384   3                              {       
1385   4                                      #if 0
                                              for (i = 4; i < 8; i++)
                                              {
                                                      index = index * 10 + (fdb[i] - 0x30);
                                              }
              
                                              HAL_DramStartAddrSet((K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)index) - 1) * 10 + 2),K_SDRAM_Prefet
             -ch);
                                              HAL_DramWordDataRead(&tmp1,&tmp2);
              
                                              if ((tmp1 == 0xff) && (tmp2 == 0xff))
                                              {
                                                      match = FALSE;
                                              }
                                              #endif
1399   4                              }
1400   3                              //patch5.1@ada@Not delete the files with duplicated file index end
1401   3                              }
1402   2                              break;
1403   2              }
1404   1      
1405   1              return match;
1406   1      }
1407          
1408          //-----------------------------------------------------------------------------
1409          //USR_MatchIndexName
1410          //-----------------------------------------------------------------------------
1411          UINT8 USR_MatchIndexName(UINT8 *fdb, UINT16 fileIndex) USING_0
1412          {
1413   1              UINT8 match = FALSE;
1414   1              UINT8 i;
1415   1              UINT8 ch;
1416   1              UINT8 indexname[4];
1417   1      
1418   1                //version4.0@ada@0513 for DCF
1419   1              //if ( USR_IsOurBaseName(fdb) )
1420   1              //{
1421   1                      for (i = 4; i > 0; i--)
1422   1                      {
1423   2                              ch = (UINT8) (fileIndex % 10) + '0';
1424   2                              fileIndex /= 10;
1425   2                              indexname[i-1] = ch;
1426   2                      }
1427   1                      if ( USR_IsSameStr( &fdb[4], &indexname[0], 4 ) )
1428   1                              match = TRUE;
1429   1              //}
1430   1              return match;
1431   1      }
1432          
1433          //-----------------------------------------------------------------------------
1434          //dcfFileDramFdbParameterRead
1435          //-----------------------------------------------------------------------------
1436          //patch3.2@ada@0401 for Multi-Frame Play Back
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 26  

1437          UINT8 dcfFileDramFdbParameterRead(UINT16 fileIdx, FDBInfo_t* fileInfo) USING_0
1438          {
1439   1           UINT8 tmp1,tmp2,tmp3,tmp4;
1440   1           UINT8 ret = SUCCESS;
1441   1      
1442   1           if (fileInfo == NULL) {
1443   2      //printf("1\n");
1444   2                   return FAIL;
1445   2           }
1446   1      
1447   1           HAL_DramStartAddrSet(K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)fileIdx - 1)) * 10, K_SDRAM_Prefetch
             -);
1448   1      
1449   1           //version4.0@ada@0513 for DCF
1450   1           //Read file FDB logical address
1451   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1452   1           HAL_DramWordDataRead(&tmp3,&tmp4);
1453   1      
1454   1           WRITE8(G_DOS_FdbAddress, 3, tmp1);
1455   1           WRITE8(G_DOS_FdbAddress, 2, tmp2);
1456   1           WRITE8(G_DOS_FdbAddress, 1, tmp3);
1457   1           WRITE8(G_DOS_FdbAddress, 0, tmp4);
1458   1           fileInfo->FdbAddr = G_DOS_FdbAddress;
1459   1           //Read file attribute and file type
1460   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1461   1      
1462   1           fileInfo->FileAttrib = G_DOS_FileAttribute = tmp1;
1463   1           fileInfo->FileType = tmp2;
1464   1      
1465   1           //Read file start cluster
1466   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1467   1      //printf("2 tmp1 %bx, tmp2 %bx\n",tmp1,tmp2);
1468   1      
1469   1           WRITE8(fileInfo->StartCluster, 1, tmp1);
1470   1           WRITE8(fileInfo->StartCluster, 0, tmp2);
1471   1      //printf("FileInfo->StartCluster %x\n",FileInfo->StartCluster);
1472   1           /*if (fileInfo->StartCluster == 0) {
1473   1      //printf("2\n");
1474   1                 ret  = FAIL;
1475   1           }*/
1476   1      
1477   1           //Read file size in bytes
1478   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1479   1           HAL_DramWordDataRead(&tmp3,&tmp4);
1480   1      
1481   1           WRITE8(G_DOS_FileSize, 3, tmp1);
1482   1           WRITE8(G_DOS_FileSize, 2, tmp2);
1483   1           WRITE8(G_DOS_FileSize, 1, tmp3);
1484   1           WRITE8(G_DOS_FileSize, 0, tmp4);
1485   1           fileInfo->FileSize = G_DOS_FileSize;
1486   1      
1487   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1488   1           HAL_DramWordDataRead(&tmp3,&tmp4);
1489   1      
1490   1           fileInfo->FileName[0] = tmp1;
1491   1           fileInfo->FileName[1] = tmp2;
1492   1           fileInfo->FileName[2] = tmp3;
1493   1           fileInfo->FileName[3] = tmp4;
1494   1               
1495   1               if(tmp1 == 0){ //file wiht this index not existed
1496   2                      ret = FAIL;
1497   2               }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 27  

1498   1      
1499   1           //Read previous file index
1500   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1501   1      
1502   1           WRITE8(G_USR_SearchPreFileIndex, 1, tmp1);
1503   1           WRITE8(G_USR_SearchPreFileIndex, 0, tmp2);
1504   1           fileInfo->PreIndex = G_USR_SearchPreFileIndex;
1505   1      
1506   1           //Read next file index
1507   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1508   1      
1509   1           WRITE8(G_USR_SearchNextFileIndex, 1, tmp1);
1510   1           WRITE8(G_USR_SearchNextFileIndex, 0, tmp2);
1511   1           fileInfo->NextIndex = G_USR_SearchNextFileIndex;
1512   1      
1513   1           return ret;
1514   1      }
1515          
1516          //-----------------------------------------------------------------------------
1517          //dcfFileDramFdbParameterWrite
1518          //-----------------------------------------------------------------------------
1519          //patch3.2@ada@0401 for Multi-Frame Play Back
1520          //version4.0@ada@0513 for DCF
1521          void dcfFileDramFdbParameterWrite(UINT8 fileType,UINT16 fileIndex) USING_0
1522          {
1523   1           UINT32 DramAddrOffset,DramAddr;
1524   1      
1525   1              //patch4.5@ada@Record DCF file name begin
1526   1              UINT8 i;
1527   1              UINT8 name[4];
1528   1              //patch4.5@ada@Record DCF file name end
1529   1      
1530   1           DramAddrOffset = sysMemAddrGet(MEM_IDX_FDB);
1531   1              
1532   1      
1533   1              //patch4.5@ada@Record DCF file name begin
1534   1           DramAddr = DramAddrOffset + ((UINT32)fileIndex - 1) * 10;
1535   1           //DramAddr = DramAddrOffset + ((UINT32)FileIndex - 1) * 8;
1536   1              //patch4.5@ada@Record DCF file name end
1537   1      
1538   1           HAL_DramStartAddrSet(DramAddr,K_SDRAM_NoPrefetch);
1539   1              //printf("write G_DOS_FdbAddress %lx\n",G_DOS_FdbAddress);
1540   1      
1541   1           //version4.0@ada@0513 for DCF
1542   1           //Record file FDB logical address
1543   1           HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAddress & 0x0000ff00) 
             ->> 8));
1544   1           HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_DOS_FdbAddress & 0xff
             -000000) >> 24));
1545   1      
1546   1           //Record file attribute and file type
1547   1           HAL_DramWordDataWrite(G_DOS_FileAttribute,fileType);
1548   1      
1549   1           //Record file start cluster
1550   1           HAL_DramWordDataWrite((UINT8)(G_DOS_StartClusterNumber & 0x00ff),(UINT8)((G_DOS_StartClusterNumber & 
             -0xff00) >> 8));
1551   1      
1552   1           //Record file size in bytes
1553   1           HAL_DramWordDataWrite((UINT8)(G_USR_NewFileSizeInFdb & 0x000000ff),(UINT8)((G_USR_NewFileSizeInFdb & 
             -0x0000ff00) >> 8));
1554   1           HAL_DramWordDataWrite((UINT8)((G_USR_NewFileSizeInFdb & 0x00ff0000) >> 16),(UINT8)((G_USR_NewFileSize
             -InFdb & 0xff000000) >> 24));
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 28  

1555   1      
1556   1              //patch4.5@ada@Record DCF file name begin
1557   1              //Write DCF file name
1558   1              for (i = 0; i < 4; i++)
1559   1              {
1560   2                      name[i]  = G_USR_Company_UpperSIG[i];
1561   2              }
1562   1      
1563   1              for (i = 0; i < 4; i += 2)
1564   1              {
1565   2              HAL_DramWordDataWrite(name[i],name[i + 1]);
1566   2              }
1567   1              //patch4.5@ada@Record DCF file name end
1568   1      
1569   1           G_USR_SearchPreFileIndex = G_USR_LastFileIndex;
1570   1      
1571   1           //Record previous file index
1572   1           HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_USR_SearchPreFileIndex & 
             -0xff00) >> 8));
1573   1      
1574   1           if (G_USR_FileCount)
1575   1           {
1576   2                G_USR_SearchNowFileIndex = G_USR_FileIndex;
1577   2                //In previous file FDB parameter area,record the next file index(This file index)
1578   2      
1579   2                      //patch4.5@ada@Record DCF file name begin
1580   2                DramAddr = DramAddrOffset + ((UINT32)G_USR_SearchPreFileIndex - 1) * 10 + 9;
1581   2                //DramAddr = DramAddrOffset + ((UINT32)G_USR_SearchPreFileIndex - 1) * 8 + 7;
1582   2                      //patch4.5@ada@Record DCF file name end
1583   2      
1584   2                HAL_DramStartAddrSet(DramAddr,K_SDRAM_NoPrefetch);
1585   2                HAL_DramWordDataWrite((UINT8)(G_USR_SearchNowFileIndex & 0x00ff),(UINT8)((G_USR_SearchNowFileInd
             -ex & 0xff00) >> 8));
1586   2           }
1587   1      }
1588          
1589          //-----------------------------------------------------------------------------
1590          //dcfFileDramFdbParameterClear
1591          //-----------------------------------------------------------------------------
1592          //patch3.2@ada@0401 for Multi-Frame Play Back
1593          //version4.0@ada@0513 for DCF
1594          void dcfFileDramFdbParameterClear(UINT8 fileType,UINT16 fileIndex) USING_0
1595          {
1596   1           UINT8 i;
1597   1           UINT32 DramAddrOffset,DramAddr;
1598   1           UINT8 tmp1,tmp2;
1599   1           UINT16 PreIndex,NextIndex;
1600   1               fileType = fileType;
1601   1               DramAddrOffset = K_SDRAM_JPG_FdbParameterBufAddr;
1602   1               /*
1603   1           if (fileType == K_DCF_JPG_TYPE)
1604   1           {
1605   1                DramAddrOffset = K_SDRAM_JPG_FdbParameterBufAddr;
1606   1           }
1607   1           else if (fileType == K_DCF_AVI_TYPE)
1608   1           {
1609   1                DramAddrOffset = K_SDRAM_AVI_FdbParameterBufAddr;
1610   1           }
1611   1           else if (fileType == K_DCF_WAV_TYPE)
1612   1           {
1613   1                DramAddrOffset = K_SDRAM_WAV_FdbParameterBufAddr;
1614   1           }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 29  

1615   1               else
1616   1               {
1617   1                        DramAddrOffset = K_SDRAM_JPG_FdbParameterBufAddr;
1618   1               }
1619   1              */
1620   1              //patch4.5@ada@Record DCF file name begin
1621   1           DramAddr = DramAddrOffset + ((UINT32)fileIndex - 1) * 10;
1622   1           //DramAddr = DramAddrOffset + ((UINT32)FileIndex - 1) * 8;
1623   1              //patch4.5@ada@Record DCF file name end
1624   1      
1625   1              //patch4.5@ada@Record DCF file name begin
1626   1           HAL_DramStartAddrSet(DramAddr + 8,K_SDRAM_Prefetch);
1627   1           //HAL_DramStartAddrSet(DramAddr + 6,K_SDRAM_Prefetch);
1628   1              //patch4.5@ada@Record DCF file name begin
1629   1      
1630   1           //Read previous file index
1631   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1632   1           PreIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
1633   1           //Read next file index
1634   1           HAL_DramWordDataRead(&tmp1,&tmp2);
1635   1           NextIndex = (UINT16)tmp1 | (((UINT16)tmp2) << 8);
1636   1      
1637   1           ////printf("Previous index of this deleting file is %d\n",PreIndex);
1638   1           ////printf("Next index of this deleting file is %d\n",NextIndex);
1639   1      
1640   1           if (PreIndex == 0)  //The first file in this directory
1641   1           {
1642   2                if (NextIndex > 0)
1643   2                {
1644   3                              //patch4.5@ada@Record DCF file name begin
1645   3                     HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)fileIndex - 1) * 10,K_SDRAM_NoPrefetch);
1646   3                     //HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)FileIndex - 1) * 8,K_SDRAM_NoPrefetch);
1647   3                              //patch4.5@ada@Record DCF file name end
1648   3      
1649   3                     HAL_DramWordDataWrite(0x00,0x00);
1650   3                     G_USR_FirstFileIndex = NextIndex;
1651   3                    // G_ChangePage = 0;
1652   3                     //printf("Window stay1\n");
1653   3                }
1654   2                else
1655   2                {
1656   3                     //G_ChangePage = 1;
1657   3                }
1658   2           }
1659   1           else
1660   1           {
1661   2                if (NextIndex > 0)  //The file not the first or the last in this directory
1662   2                {
1663   3                              //patch4.5@ada@Record DCF file name begin
1664   3                     HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)PreIndex - 1) * 10 + 9,K_SDRAM_NoPrefetch);
1665   3                     //HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)PreIndex - 1) * 8 + 7,K_SDRAM_NoPrefetch);
1666   3                              //patch4.5@ada@Record DCF file name end
1667   3      
1668   3                     HAL_DramWordDataWrite((UINT8)(NextIndex & 0x00ff),(UINT8)((NextIndex & 0xff00) >> 8));
1669   3      
1670   3                              //patch4.5@ada@Record DCF file name begin
1671   3                     HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)NextIndex - 1) * 10 + 8,K_SDRAM_NoPrefetch);
1672   3                     //HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)NextIndex - 1) * 8 + 6,K_SDRAM_NoPrefetch)
             -;
1673   3                              //patch4.5@ada@Record DCF file name end
1674   3      
1675   3                     HAL_DramWordDataWrite((UINT8)(PreIndex & 0x00ff),(UINT8)((PreIndex & 0xff00) >> 8));
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 30  

1676   3                     // G_ChangePage = 0;
1677   3                     //printf("Window stay2\n");
1678   3                }
1679   2                else //The last file in this directory
1680   2                {
1681   3                              //patch4.5@ada@Record DCF file name begin
1682   3                     HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)PreIndex - 1) * 10 + 9,K_SDRAM_NoPrefetch);
1683   3                     //HAL_DramStartAddrSet(DramAddrOffset + ((UINT32)PreIndex - 1) * 8 + 7,K_SDRAM_NoPrefetch);
1684   3                              //patch4.5@ada@Record DCF file name end
1685   3      
1686   3                     HAL_DramWordDataWrite(0x00,0x00);
1687   3      
1688   3                     if (G_USR_FileCount > 0)
1689   3                     {
1690   4                          G_USR_LastFileIndex = PreIndex;
1691   4                     }
1692   3                                 //patch4.5@ada@Fix file index bug begin
1693   3                     //else
1694   3                     //{
1695   3                     //     G_USR_LastFileIndex = 0;
1696   3                     //}
1697   3                                 //patch4.5@ada@Fix file index bug end
1698   3                }
1699   2           }
1700   1      
1701   1           HAL_DramStartAddrSet(DramAddr,K_SDRAM_NoPrefetch);
1702   1      
1703   1              //patch4.5@ada@Record DCF file name begin
1704   1           for (i = 0; i < 10; i++)
1705   1           {
1706   2                HAL_DramWordDataWrite(0x00,0x00);
1707   2           }
1708   1      
1709   1           //for (i = 0; i < 8; i++)
1710   1           //{
1711   1           //     HAL_DramWordDataWrite(0x00,0x00);
1712   1           //}
1713   1              //patch4.5@ada@Record DCF file name end
1714   1      
1715   1      /*add by phil@08.05.16 s*/      
1716   1               G_USR_FileCount--;
1717   1       
1718   1               if (G_USR_FileCount == 0) {
1719   2                       G_USR_FirstFileIndex = 0;
1720   2                       G_USR_LastFileIndex = 0;
1721   2               }
1722   1      /*add by phil@08.05.16 e*/  
1723   1      
1724   1      }
1725          
1726          //-----------------------------------------------------------------------------
1727          //USR_ResetDramFdbParameterArea
1728          //-----------------------------------------------------------------------------
1729          //patch3.2@ada@0401 for Multi-Frame Play Back
1730          //version4.0@ada@0513 for DCF
1731          //patch4.2@ada@0527 for DCF
1732          void USR_ResetDramFdbParameterArea(void)
1733          {
1734   1           HAL_GprmDramFill(K_SDRAM_JPG_FdbParameterBufAddr,(K_SDRAM_JPG_FdbParameterBufSize<<1),0x00);
1735   1      //     HAL_GprmDramFill(K_SDRAM_JPG_FdbParameterBufAddr,(UINT16)(K_SDRAM_JPG_FdbParameterBufSize / 2),0x00
             -);
1736   1      //     HAL_GprmDramFill(K_SDRAM_JPG_FdbParameterBufAddr + (K_SDRAM_JPG_FdbParameterBufSize / 2),(UINT16)(K
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 31  

             -_SDRAM_JPG_FdbParameterBufSize / 2),0x00);
1737   1      //     HAL_GprmDramFill(K_SDRAM_AVI_FdbParameterBufAddr,(UINT16)(K_SDRAM_AVI_FdbParameterBufSize / 2),0x00
             -);
1738   1      //     HAL_GprmDramFill(K_SDRAM_AVI_FdbParameterBufAddr + (K_SDRAM_AVI_FdbParameterBufSize / 2),(UINT16)(K
             -_SDRAM_AVI_FdbParameterBufSize / 2),0x00);
1739   1      //     HAL_GprmDramFill(K_SDRAM_WAV_FdbParameterBufAddr,(UINT16)(K_SDRAM_WAV_FdbParameterBufSize / 2),0x00
             -);
1740   1      //     HAL_GprmDramFill(K_SDRAM_WAV_FdbParameterBufAddr + (K_SDRAM_WAV_FdbParameterBufSize / 2),(UINT16)(K
             -_SDRAM_WAV_FdbParameterBufSize / 2),0x00);
1741   1      
1742   1           //patch4.4@ada@MP3 end
1743   1      }
1744          
1745          //-----------------------------------------------------------------------------
1746          //save fdb info to buffer
1747          //-----------------------------------------------------------------------------
1748          UINT8 dcfFileDramFdbParameterSave(UINT16 fileIdx, FDBInfo_t* fileInfo) USING_0
1749          {
1750   1              UINT8 ret = SUCCESS;
1751   1      
1752   1              if (fileInfo == NULL) {
1753   2                      return FAIL;
1754   2              }
1755   1      
1756   1              HAL_DramStartAddrSet(K_SDRAM_JPG_FdbParameterBufAddr + (((UINT32)fileIdx - 1)) * 10, K_SDRAM_NoPrefetch);
1757   1      
1758   1              //Write file FDB logical address
1759   1              G_DOS_FdbAddress = fileInfo->FdbAddr;
1760   1              HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAddress & 0x0000ff00) >> 8
             -));
1761   1              HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_DOS_FdbAddress & 0xff0000
             -00) >> 24));
1762   1      
1763   1              //Write file attribute and file type
1764   1              G_DOS_FileAttribute = fileInfo->FileAttrib;
1765   1              HAL_DramWordDataWrite(G_DOS_FileAttribute,fileInfo->FileType);
1766   1      
1767   1              //Write file start cluster
1768   1              HAL_DramWordDataWrite((UINT8)(fileInfo->StartCluster & 0x00ff),(UINT8)((fileInfo->StartCluster & 0xff00) 
             ->> 8));
1769   1      
1770   1              //Write file size in bytes
1771   1              G_DOS_FileSize = fileInfo->FileSize;
1772   1              HAL_DramWordDataWrite((UINT8)(G_DOS_FileSize & 0x000000ff),(UINT8)((G_DOS_FileSize & 0x0000ff00) >> 8));
1773   1              HAL_DramWordDataWrite((UINT8)((G_DOS_FileSize & 0x00ff0000) >> 16),(UINT8)((G_DOS_FileSize & 0xff000000) 
             ->> 24));
1774   1      
1775   1              //Write filename
1776   1              HAL_DramWordDataWrite(fileInfo->FileName[0],fileInfo->FileName[1]);
1777   1              HAL_DramWordDataWrite(fileInfo->FileName[2],fileInfo->FileName[3]);
1778   1      
1779   1              //Write previous file index
1780   1              G_USR_SearchPreFileIndex = fileInfo->PreIndex;
1781   1              HAL_DramWordDataWrite((UINT8)(G_USR_SearchPreFileIndex & 0x00ff),(UINT8)((G_USR_SearchPreFileIndex & 0xff
             -00) >> 8));
1782   1      
1783   1              //Write next file index
1784   1              G_USR_SearchNextFileIndex = fileInfo->NextIndex;
1785   1              HAL_DramWordDataWrite((UINT8)(G_USR_SearchNextFileIndex & 0x00ff),(UINT8)((G_USR_SearchNextFileIndex & 0x
             -ff00) >> 8));
1786   1      
1787   1              return ret;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 32  

1788   1      }
1789          
1790          //-----------------------------------------------------------------------------
1791          //dcfFileReadOnlyAttrSet
1792          //-----------------------------------------------------------------------------
1793          //version4.0@ada@0513 for Read Only
1794          void dcfFileReadOnlyAttrSet(UINT16 FileIndex,UINT8 FileType,UINT8 ReadOnlyOn) USING_0
1795          {
1796   1              UINT8 tmp1,tmp2;
1797   1              UINT32 DramAddrOffset,DramAddr;
1798   1      
1799   1              //xian ++ 20080826
1800   1              UINT8 memoName[12];
1801   1              FDBInfo_t fileInfo;
1802   1              UINT16 fileCnt;
1803   1      
1804   1              UINT32 addrTmp =K_SDRAM_ImagePlaybackGeneralBufAddr;// K_SDRAM_ImagePlaybackBufAddr;
1805   1              UINT32 addr;
1806   1              UINT8 attr;
1807   1              UINT8 FDB_indx,DevId;
1808   1              UINT32 pageLogAddr ;
1809   1        
1810   1              DramAddrOffset = K_SDRAM_JPG_FdbParameterBufAddr;
1811   1              if(dcfFileDramFdbParameterRead(FileIndex, &fileInfo) != SUCCESS)
1812   1                      return;
1813   1              DramAddr = DramAddrOffset + ((UINT32)FileIndex - 1) * 10;
1814   1      
1815   1              //update fdb
1816   1              FDB_indx=(UINT8)(G_DOS_FdbAddress&0x0000000f);
1817   1              pageLogAddr = G_DOS_FdbAddress>>4;
1818   1              addr = addrTmp+ FDB_indx*16 + 5;
1819   1              DevId = DOS_CurrDriverGet();
1820   1              if(0 == DOS_SectorRead(DevId, pageLogAddr, 1, addrTmp))
1821   1                      return ;
1822   1      
1823   1              HAL_DramStartAddrSet(addr,K_SDRAM_Prefetch);
1824   1              HAL_DramWordDataRead(&tmp1,&tmp2);
1825   1              attr= (tmp2 & 0xfe) | (ReadOnlyOn?1:0);
1826   1              HAL_DramStartAddrSet(addr,K_SDRAM_NoPrefetch);
1827   1              HAL_DramWordDataWrite(tmp1,attr);
1828   1              if(0 == DOS_SectorWrite(DevId, pageLogAddr, 1, addrTmp))
1829   1                      return ;
1830   1      
1831   1              //update fdb buffer
1832   1              HAL_DramStartAddrSet(DramAddr + 2,K_SDRAM_Prefetch);
1833   1              HAL_DramWordDataRead(&tmp1,&tmp2);
1834   1      
1835   1              HAL_DramStartAddrSet(DramAddr + 2,K_SDRAM_NoPrefetch);
1836   1              HAL_DramWordDataWrite(attr,tmp2);
1837   1                       
1838   1              FileType = fileInfo.FileType;
1839   1              if (FileType == K_DCF_JPG_TYPE){
1840   2                      memoName[8] = 'W';
1841   2                      memoName[9] = 'A';
1842   2                      memoName[10] = 'V';
1843   2                      memoName[11] = '\0';
1844   2      
1845   2                      fileCnt = FileIndex;
1846   2                      for(tmp1=7; tmp1 >= 4; tmp1--){
1847   3                              memoName[tmp1] = '0' + (UINT8)(fileCnt % 10);
1848   3                              fileCnt /= 10;
1849   3                      }        
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 33  

1850   2                      for(tmp1=0; tmp1 < 4; tmp1++)
1851   2                              memoName[tmp1] = fileInfo.FileName[tmp1];
1852   2      
1853   2                      if(ReadOnlyOn)
1854   2                              dcfFileAttrSet(memoName, memoName, ATTR_R | ATTR_A, ATTR_MODIFY_ATTR);
1855   2                      else
1856   2                              dcfFileAttrSet(memoName, memoName, ATTR_A, ATTR_MODIFY_ATTR);
1857   2                      
1858   2                      //xian ++ 20121116, #45355 dcfFileAttrSet() modify fdb buffer, so save back 
1859   2                      fileInfo.FileAttrib = (fileInfo.FileAttrib & 0xfe) | (ReadOnlyOn?1:0);
1860   2                      dcfFileDramFdbParameterSave(FileIndex, &fileInfo);
1861   2              }     
1862   1      
1863   1      }
1864          #if 0
              //-----------------------------------------------------------------------------
              //USR_SetFdb
              //-----------------------------------------------------------------------------
              UINT8 DOS_SetFdb(UINT8 *fdb, UINT32 fdbLogAddr) USING_0
              {
                      UINT8 sts;
                      UINT16 offset;
                      UINT32 pageLogAddr;
                      UINT16 k;
              
                      M_DOS_ClearError();
              
                      pageLogAddr = ( fdbLogAddr >> K_Card_PageSizeShift ) << K_Card_PageSizeShift;
                      offset = fdbLogAddr - pageLogAddr;
                      //printf("1 pageLogAddr[%lu]\n",pageLogAddr);
                      if ( sts = DOS_ReadSector( K_DOS_DstSram, pageLogAddr, 0 ) )
                      {
                              for ( k = 0; k < 32; k++ )
                                      G_ucDataBuffer[offset+k] = fdb[k];
                              // patch 4.4-6@wyeo@improve non smc nand card sram to card performance
                              //dumpData(32, &G_ucDataBuffer[offset], 0);
                              sts = DOS_WriteSector(K_DOS_SrcSram, pageLogAddr, 0);
                      }
              
                      return sts;
              }
              #endif
1892          #if 0
              //-----------------------------------------------------------------------------
              //USR_GetFdb
              //-----------------------------------------------------------------------------
              //version4.0@ada@0513 for Read-Only
              UINT8 USR_GetFdb(UINT8 *fdb,UINT32 fdbLogAddr) USING_0
              {
                   UINT8 sts;
                   UINT16 offset;
                      UINT32 pageLogAddr;
                   UINT16 k;
              
                      M_DOS_ClearError();
              
                     pageLogAddr = (fdbLogAddr >> K_Card_PageSizeShift) << K_Card_PageSizeShift;
                      offset = fdbLogAddr - pageLogAddr;
              
                      //printf("2 pageLogAddr[%lu]\n",pageLogAddr);
                      if (sts = DOS_ReadSector(K_DOS_DstSram,pageLogAddr,0))
                      {
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 34  

                        for ( k = 0; k < 32; k++ )
                        {
                             fdb[k] = G_ucDataBuffer[offset + k];
                      
                        }
                      }
                      //dumpData(32, fdb, 0);
              
                   return sts;
              }
              #endif
1923          //-----------------------------------------------------------------------------
1924          //dcfRtcTimeUpdate
1925          //-----------------------------------------------------------------------------
1926          //patch3.2@ada@0401 For Date & Time Update
1927          
1928          void dcfRtcTimeUpdate(void) USING_0
1929          {
1930   1           HAL_GlobalReadRTC(&G_DATEINFO);
1931   1           G_DOS_CreateDate = ((UINT16)(G_DATEINFO.Year + 20) << 9) + ((UINT16)(G_DATEINFO.Month) << 5) + (UINT1
             -6)(G_DATEINFO.Day);
1932   1           //patch4.4.1@richie@dt
1933   1           //update for dos date time error
1934   1           G_DOS_CreateTime = ((UINT16)(G_DATEINFO.Hour) << 11) + ((UINT16)(G_DATEINFO.Minute) << 5) + ((UINT16)
             -(G_DATEINFO.Second) >> 1);
1935   1      }
1936          
1937          //-----------------------------------------------------------------------------
1938          //USR_CheckExtType
1939          //-----------------------------------------------------------------------------
1940          UINT8 USR_CheckExtType(UINT8 *name) USING_0
1941          {
1942   1              UINT8 fileType = 0;
1943   1      
1944   1              if ( !(G_DCF_FileType_Mask&K_USR_JPG_TYPE_MASK) && USR_IsOurFileExt(name,MEDIA_JPG) )
1945   1                     fileType = K_DCF_JPG_TYPE;
1946   1              #if ( K_File_HaveVideo )
1947   1              else if ( !(G_DCF_FileType_Mask&K_USR_AVI_TYPE_MASK) && USR_IsOurFileExt(name,MEDIA_AVI) )
1948   1                     fileType = K_DCF_AVI_TYPE;
1949   1              #endif
1950   1      //        #if ( AUDIO_OPTION == 1 )
1951   1              else if ( !(G_DCF_FileType_Mask&K_USR_WAV_TYPE_MASK) && USR_IsOurFileExt(name,MEDIA_WAV) )
1952   1                     fileType = K_DCF_WAV_TYPE;
1953   1      //        #endif
1954   1                      else if ( !(G_DCF_FileType_Mask& K_USR_WGI_TYPE_MASK) && USR_IsOurFileExt(name,MEDIA_TLS) )
1955   1                     fileType = K_DCF_WGI_TYPE;
1956   1              //patch4.4@ada@MP3 begin
1957   1              //patch4.4@ada@MP3 end
1958   1      
1959   1              // WWWW0410, Fix delete last bug
1960   1              //if ( fileType != 0 )
1961   1              //      G_USR_FileType = fileType;
1962   1      
1963   1              return fileType;
1964   1      }
1965          
1966          //xian ++ 20080716
1967          //return *count = 100~999
1968          UINT8 USR_GetMediaFolderCount(UINT8 *name, UINT16 *count)
1969          {
1970   1          UINT8 i;
1971   1          UINT8 ret = FAIL;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 35  

1972   1      
1973   1          if(!name || !count)
1974   1              return ret;
1975   1      
1976   1          *count = 0;
1977   1          for (i = 0; i < 3; i++)
1978   1          {
1979   2              if('0' > name[i] || '9' < name[i])
1980   2                  return ret;
1981   2              *count = *count * 10 + (UINT16)(name[i] - '0');
1982   2          }
1983   1          if(*count > 999 || *count < 100)
1984   1              return ret;
1985   1      
1986   1          for(; i < 8; i++){
1987   2              if('_' != name[i] && ('A' > name[i] || 'Z' < name[i])&&('0' > name[i] || '9' < name[i]))
1988   2                  return ret;
1989   2          }
1990   1          ret = SUCCESS;
1991   1              return ret;    
1992   1      }
1993          
1994          
1995          UINT8 USR_FolderCategory(UINT8 *name,UINT8 opt)
1996          {
1997   1              UINT8 ret = TRUE;
1998   1          UINT8 i;
1999   1              UINT8 dirName[12];
2000   1              
2001   1              switch(opt){
2002   2                      case NORMAL_SNAPFOLDER:
2003   2                              memcpy( dirName,G_USR_Dir1Name, 8);
2004   2                      break;
2005   2                      case TIMELAPSE_VIDEOFOLDER:
2006   2                              memcpy( dirName,G_USR_TLSVIDDirName, 8);
2007   2                      break;
2008   2              }
2009   1              
2010   1              //printf("dirName=%s\n",dirName);
2011   1              for(i = 3; ret && i < 8; i++){
2012   2              ret = (name[i] == dirName[i]);
2013   2                      if(!ret){
2014   3                              break;
2015   3                      }
2016   2          }
2017   1          return ret;
2018   1      }
2019          
2020          //-----------------------------------------------------------------------------
2021          //dcfDirInitialize
2022          //-----------------------------------------------------------------------------
2023          //patch3.2@ada@0401 For DCF
2024          UINT8 dcfDirInitialize(void)
2025          {
2026   1              //UINT32 t0,t1;
2027   1              //UINT8 dirName[9] = "100MEDIA";
2028   1              UINT8 dirName[12];
2029   1              UINT8 sts = TRUE;
2030   1              UINT8 DevId = DOS_CurrDriverGet();
2031   1              UINT16 cnt;
2032   1              UINT8 curDev; //cx++
2033   1              FDB fdb;  //cx++
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 36  

2034   1      //      FDBMediaFolderInfo_t info;
2035   1              UINT16 dirCnt;  //100~999
2036   1      
2037   1              //dirName[8]  = '\0';
2038   1              dcfInitDir1NameGet(dirName);
2039   1      //      printf("dcfDirInitialize = %bu\n",DevId);
2040   1              G_USR_MaxDir1Count = 100;
2041   1              G_USR_Dir1Count = G_USR_MaxDir1Count;
2042   1              G_USR_AllFolderFileTotal = 0;
2043   1              sts = DIR_Change("DCIM"); 
2044   1              if( sts != DOS_SUCCESS ){
2045   2                      sts = DIR_Create("DCIM");
2046   2                      if( sts != DOS_SUCCESS ) return FALSE; 
2047   2                      sts = DIR_Change("DCIM"); 
2048   2                      if( sts != DOS_SUCCESS ) return FALSE; 
2049   2              }
2050   1              //G_USR_FileCount = 0;
2051   1              //USR_ResetDramFdbParameterArea();
2052   1          //goto 100MEDIA
2053   1      
2054   1              DIR_SearchReset(); //xian ++ 20100830 #40739    
2055   1              curDev = DOS_CurrDriverGet();      
2056   1              //dbgTimerStop();
2057   1              //__FUNC_TRACK__;
2058   1              while(1)
2059   1              {//search or create 100XXXXX
2060   2                      sts = DIR_Search(curDev, "*", (FDB *)&fdb, 0);
2061   2                      //printf("--dir:%s, %lu\n", fdb.name, fdb.start);
2062   2                      if(sts == FIND_FILE_FAIL)
2063   2                      {
2064   3                              //__FUNC_TRACK__;
2065   3                              // printf("create 100\n");
2066   3                              sts = DIR_Create(dirName); 
2067   3                              sts = DIR_Change(dirName);     
2068   3                              if( sts != DOS_SUCCESS )
2069   3                              {
2070   4                                      return FALSE;
2071   4                              }
2072   3                              dirCnt = 100; //xian ++41152
2073   3                              sts = TRUE;  
2074   3                              break;
2075   3                      }        
2076   2                      else if(fdb.attr & ATTR_D && fdb.name[0] != '.')
2077   2                      {
2078   3                              //printf("dir:%s, %lu\n", fdb.name, fdb.start);
2079   3                              //__FUNC_TRACK__;
2080   3                              if( USR_GetMediaFolderCount(fdb.name, &dirCnt) == SUCCESS)
2081   3                              { 
2082   4                                      if(dirCnt == 100)
2083   4                                      { //xian ++ 41152
2084   5                                              DIR_Change(fdb.name); 
2085   5                                              break;
2086   5                                      }
2087   4                              }                
2088   3                      }
2089   2              }        
2090   1      
2091   1              if( dirCnt != 100 )
2092   1              { //xian ++ 41152
2093   2              sts = DIR_Create(dirName); 
2094   2              sts = DIR_Change(dirName); 
2095   2                      if( sts != DOS_SUCCESS ) 
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 37  

2096   2                      {
2097   3                              return FALSE;
2098   3                      }
2099   2                      sts = TRUE;
2100   2              }
2101   1              G_USR_Dir1Count = 100; // should goto 100XXXXX, it is easy to find last unempty folder
2102   1              USR_UpdateMediaFolderInfo();
2103   1      
2104   1              dcfFileInitialize();
2105   1              G_USR_AllFolderFileTotal+=G_USR_FileCount;
2106   1              for(cnt=1;cnt<G_USR_TotalDirectory;cnt++)
2107   1              {
2108   2                      dcfFolderNext(1);
2109   2                      dcfFileInitialize();
2110   2                      G_USR_AllFolderFileTotal+=G_USR_FileCount;        
2111   2              }
2112   1              return sts;
2113   1      }
2114          
2115          #if MT_DEBUG
              static void showInfo(FDBMediaFolderInfo_t *info)
              {
                  printf("------------------------\n");
                  printf("startCluster = %lu\n", info->startCluster);
                  printf("ourDirMark = %x\n", info->ourDirMark);
                  printf("name = %c%c%c%c%c%c%c%c\n", 
                      info->name[0],info->name[1],info->name[2],info->name[3],
                      info->name[4],info->name[5],info->name[6],info->name[7]
                      );
                  printf("prevCnt = %u\n", info->prevCnt);
                  printf("nextCnt = %u\n", info->nextCnt);    
                  printf("------------------------\n");
              }
              #endif
2130          
2131          UINT8 USR_GetMediaFolderInfo(UINT16 dirCnt, FDBMediaFolderInfo_t *info)
2132          {
2133   1          UINT8 ret = FAIL;
2134   1          UINT16 i;
2135   1          UINT32 addr;
2136   1          UINT8 lVal, hVal;
2137   1      
2138   1          if(!info || dirCnt < 100 || dirCnt > 999)
2139   1              return ret;
2140   1          
2141   1          addr = K_SDRAM_DcfDirBufAddr + ((UINT32)dirCnt - 100) * (sizeof(FDBMediaFolderInfo_t) >> 1);          
             -     
2142   1          HAL_DramStartAddrSet(addr,K_SDRAM_Prefetch);
2143   1      
2144   1          HAL_DramWordDataRead(&lVal, &hVal);
2145   1          info->startCluster = (UINT32)lVal + ((UINT32)hVal << 8);
2146   1          HAL_DramWordDataRead(&lVal, &hVal);
2147   1          info->startCluster = info->startCluster + ((UINT32)lVal << 16) + ((UINT32)hVal << 24);
2148   1              
2149   1          HAL_DramWordDataRead(&lVal, &hVal);
2150   1          info->ourDirMark = (UINT16)lVal + ((UINT16)hVal << 8);
2151   1      
2152   1          for(i = 0; i < 8; i+=2){
2153   2              HAL_DramWordDataRead(&lVal, &hVal);
2154   2              info->name[i] = lVal;
2155   2              info->name[i+1] = hVal;
2156   2          }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 38  

2157   1      
2158   1          HAL_DramWordDataRead(&lVal, &hVal);
2159   1          info->prevCnt= (UINT16)lVal + ((UINT16)hVal << 8);
2160   1      
2161   1          HAL_DramWordDataRead(&lVal, &hVal);
2162   1          info->nextCnt= (UINT16)lVal + ((UINT16)hVal << 8);
2163   1      
2164   1          return SUCCESS;
2165   1      }
2166          
2167          static UINT8 USR_SetMediaFolderInfo(UINT16 dirCnt, FDBMediaFolderInfo_t *info)
2168          {
2169   1          UINT8 ret = FAIL;
2170   1          UINT16 i;
2171   1          UINT32 addr;
2172   1          UINT8 lVal, hVal;
2173   1      
2174   1          if(!info || dirCnt < 100 || dirCnt > 999)
2175   1              return ret;
2176   1          
2177   1          addr = K_SDRAM_DcfDirBufAddr + ((UINT32)dirCnt - 100) * (sizeof(FDBMediaFolderInfo_t) >> 1);          
             -     
2178   1          HAL_DramStartAddrSet(addr,K_SDRAM_NoPrefetch);
2179   1      
2180   1          lVal = (UINT8)info->startCluster;
2181   1          hVal = (UINT8)(info->startCluster >> 8);
2182   1          HAL_DramWordDataWrite(lVal, hVal);
2183   1          lVal = (UINT8)(info->startCluster >> 16);
2184   1          hVal = (UINT8)(info->startCluster >> 24);
2185   1          HAL_DramWordDataWrite(lVal, hVal);
2186   1              
2187   1          lVal = (UINT8)info->ourDirMark;
2188   1          hVal = (UINT8)(info->ourDirMark >> 8);
2189   1          HAL_DramWordDataWrite(lVal, hVal);
2190   1      
2191   1          for(i = 0; i < 8; i+=2){
2192   2              HAL_DramWordDataWrite(info->name[i], info->name[i+1]);
2193   2          }
2194   1      
2195   1          lVal = (UINT8)info->prevCnt;
2196   1          hVal = (UINT8)(info->prevCnt >> 8);
2197   1          HAL_DramWordDataWrite(lVal, hVal);
2198   1      
2199   1          lVal = (UINT8)info->nextCnt;
2200   1          hVal = (UINT8)(info->nextCnt >> 8);
2201   1          HAL_DramWordDataWrite(lVal, hVal);
2202   1      
2203   1          return SUCCESS;
2204   1      }
2205          
2206          void USR_GetNextMediaFolderCnt(UINT16 curDir, UINT16 *nextDir, UINT16 *prevDir)
2207          {
2208   1          UINT8 lVal, hVal;
2209   1          UINT32 addr;
2210   1      
2211   1          if(!nextDir || !prevDir || curDir < 100 || curDir > 999)
2212   1              return ;
2213   1      
2214   1          addr = K_SDRAM_DcfDirBufAddr + ((UINT32)curDir - 100) * (sizeof(FDBMediaFolderInfo_t) >> 1) 
2215   1              + (sizeof(FDBMediaFolderInfo_t) >> 1) - 2;               
2216   1      
2217   1          HAL_DramStartAddrSet(addr,K_SDRAM_Prefetch);
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 39  

2218   1      
2219   1          HAL_DramWordDataRead(&lVal, &hVal);
2220   1          *prevDir = (UINT16)lVal + ((UINT16)hVal << 8);
2221   1          HAL_DramWordDataRead(&lVal, &hVal);
2222   1          *nextDir = (UINT16)lVal + ((UINT16)hVal << 8);
2223   1      
2224   1          //printf("get : 0x%lx, %u, %u, %u\n",addr, curDir, *nextDir, *prevDir);
2225   1      }
2226          
2227          static void USR_SetNextMediaFolderCnt(UINT16 curDir, UINT16 nextDir, UINT16 prevDir)
2228          {
2229   1          UINT8 lVal, hVal;
2230   1          UINT32 addr;
2231   1      
2232   1          if(curDir < 100 || curDir > 999)
2233   1              return ;
2234   1      
2235   1      
2236   1          addr = K_SDRAM_DcfDirBufAddr + ((UINT32)curDir - 100) * (sizeof(FDBMediaFolderInfo_t) >> 1) 
2237   1              + (sizeof(FDBMediaFolderInfo_t) >> 1) - 2;               
2238   1      
2239   1          //printf("set : 0x%lx, %u, %u, %u\n",addr, curDir, nextDir, prevDir);
2240   1          HAL_DramStartAddrSet(addr,K_SDRAM_NoPrefetch);
2241   1      
2242   1          lVal = (UINT8)prevDir;
2243   1          hVal = (UINT8)(prevDir >> 8);
2244   1          HAL_DramWordDataWrite(lVal, hVal);
2245   1          lVal = (UINT8)nextDir;
2246   1          hVal = (UINT8)(nextDir >> 8);
2247   1          HAL_DramWordDataWrite(lVal, hVal);
2248   1      }
2249          
2250          static UINT8 AddMediaFolderInfo(UINT16 dirCnt, FDBMediaFolderInfo_t *info)
2251          {
2252   1          UINT8 ret = FAIL;
2253   1          UINT16 srhDir, nextDir, prevDir;
2254   1          UINT16 i = 0;
2255   1      
2256   1          if(!info || dirCnt < 100 || dirCnt > 999)
2257   1              return ret;
2258   1      
2259   1          srhDir = G_USR_MaxDir1Count;   //pointer to the tail
2260   1          if(srhDir < 100 ){//first info
2261   2              info->prevCnt = 0;
2262   2              info->nextCnt = 0;
2263   2          }
2264   1          else{
2265   2              while(i ++ < 900){
2266   3                  USR_GetNextMediaFolderCnt(srhDir, &nextDir, &prevDir);
2267   3                  if(dirCnt > srhDir){ //insert after tail
2268   4                      USR_SetNextMediaFolderCnt(srhDir, dirCnt, prevDir);
2269   4      
2270   4                      info->prevCnt = srhDir;
2271   4                      info->nextCnt = nextDir;
2272   4      
2273   4                      srhDir = nextDir;
2274   4                      USR_GetNextMediaFolderCnt(srhDir, &nextDir, &prevDir);
2275   4                      USR_SetNextMediaFolderCnt(srhDir, nextDir, dirCnt);                
2276   4                      
2277   4                      break;
2278   4                  }else if(dirCnt < srhDir){
2279   4                      if(prevDir){//not the header
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 40  

2280   5                          srhDir = prevDir;
2281   5                      }
2282   4                      else{//insert as a header
2283   5                          USR_SetNextMediaFolderCnt(srhDir, nextDir, dirCnt);
2284   5          
2285   5                          info->nextCnt = srhDir;
2286   5                          info->prevCnt = prevDir;
2287   5                                             
2288   5                          break;
2289   5                      }
2290   4                  }
2291   3                  else
2292   3                      return ret;     //overlap
2293   3              }        
2294   2          }
2295   1          
2296   1          if(G_USR_MinDir1Count > dirCnt)
2297   1              G_USR_MinDir1Count = dirCnt;
2298   1          
2299   1          if(G_USR_MaxDir1Count < dirCnt)
2300   1              G_USR_MaxDir1Count = dirCnt;
2301   1      
2302   1      #if MT_DEBUG
                  //showInfo(info);
              #endif
2305   1          USR_SetMediaFolderInfo(dirCnt, info);
2306   1      
2307   1          return SUCCESS;
2308   1      }
2309          
2310          #if 1//ndef MULTI_FOLDER_AS_ONE
2311          UINT8 USR_UpdateMediaFolderInfo()
2312          {
2313   1          UINT8 ret = FAIL;
2314   1          UINT8 sts;
2315   1          UINT8 curDev;
2316   1          UINT32 curDir;
2317   1          FDB fdb;
2318   1          UINT8 rootName[1+13]; // "\DCIM"
2319   1          FDBMediaFolderInfo_t info;
2320   1          UINT16 dirCnt;  //100~999
2321   1          UINT8 i;
2322   1              
2323   1          curDev = DOS_CurrDriverGet();
2324   1          curDir = DOS_CurrDirGet(curDev);
2325   1      
2326   1          //goto DCIM 
2327   1          rootName[0] = '\\';
2328   1          dcfDir0NameGet(rootName+1);    
2329   1          rootName[13] = '\0';    //fix file error when plug sd card
2330   1          if(DIR_Change(rootName) != DOS_SUCCESS){
2331   2              return ret;
2332   2          }
2333   1          HAL_GprmDramFill(K_SDRAM_DcfDirBufAddr,(K_SDRAM_DcfDirBufSize << 1),0x00);
2334   1       //   HAL_GprmDramFill(K_SDRAM_DcfDirBufAddr,(UINT16)(K_SDRAM_DcfDirBufSize / 2),0x00);
2335   1       //   HAL_GprmDramFill(K_SDRAM_DcfDirBufAddr + (K_SDRAM_DcfDirBufSize / 2),(UINT16)(K_SDRAM_DcfDirBufSize 
             -/ 2),0x00);
2336   1          G_USR_MaxDir1Count = 99;
2337   1          G_USR_MinDir1Count = 1000;
2338   1          G_USR_TotalDirectory = 0;
2339   1              G_USR_MaxNormalDirCnt = 100;
2340   1              
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 41  

2341   1          ret = SUCCESS;
2342   1              DIR_SearchReset(); //xian ++ 20100830 #40739
2343   1          while(1){
2344   2              sts = DIR_Search(curDev, "*", (FDB *)&fdb, 0);
2345   2              if(sts == FIND_FILE_FAIL){
2346   3                  break;
2347   3              }        
2348   2              else if(fdb.attr & ATTR_D && fdb.name[0] != '.')
2349   2              {
2350   3                  if( USR_GetMediaFolderCount(fdb.name, &dirCnt) == SUCCESS)
2351   3                  {
2352   4                      info.startCluster = fdb.start;
2353   4      
2354   4                      for(i=0; i < 8; i ++){
2355   5                          info.name[i] = fdb.name[i];
2356   5                      }
2357   4                          
2358   4                      if(USR_FolderCategory(fdb.name,NORMAL_SNAPFOLDER)){
2359   5                          info.ourDirMark = 0xffff;
2360   5                          if(G_USR_MaxNormalDirCnt < dirCnt){
2361   6                                                      G_USR_MaxNormalDirCnt = dirCnt;
2362   6                          }
2363   5                      }
2364   4                      else if(USR_FolderCategory(fdb.name,TIMELAPSE_VIDEOFOLDER)){
2365   5                                              info.ourDirMark = 0xfff0;
2366   5                                              if(G_USR_MaxTlsVidDirCnt < dirCnt){
2367   6                                                      G_USR_MaxTlsVidDirCnt = dirCnt;
2368   6                                              }
2369   5                              }else{
2370   5                                  info.ourDirMark = 0;
2371   5                              }
2372   4                                                      
2373   4                      if(AddMediaFolderInfo(dirCnt, &info) == SUCCESS){
2374   5                          G_USR_TotalDirectory ++;
2375   5      
2376   5                          if(curDir == fdb.start)
2377   5                              G_USR_Dir1Count = dirCnt;
2378   5                      }                
2379   4                  }
2380   3              }        
2381   2          }
2382   1      
2383   1              printf("total=%u, cur=%u\n", G_USR_TotalDirectory, G_USR_Dir1Count);    
2384   1          DOS_CurrDirSet(curDev, curDir);//go back org dir
2385   1          
2386   1          return ret;    
2387   1      }
2388          
2389          UINT8 dcfFolderNext(UINT8 forward)
2390          {
2391   1          UINT8 ret = FAIL;
2392   1          UINT8 curDev;
2393   1          UINT16 curDir, nextDir, prevDir;
2394   1          FDBMediaFolderInfo_t info;
2395   1          
2396   1          if(G_USR_TotalDirectory > 1){        
2397   2              curDev = DOS_CurrDriverGet();
2398   2              curDir = G_USR_Dir1Count;
2399   2              USR_GetNextMediaFolderCnt(curDir, &nextDir, &prevDir);
2400   2      //printf("change %u, %u, %u\n", curDir, nextDir, prevDir);
2401   2              if(nextDir == 0)//curDir is last
2402   2                  nextDir = G_USR_MinDir1Count;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 42  

2403   2      
2404   2              if(prevDir == 0)//curDir is first
2405   2                  prevDir = G_USR_MaxDir1Count;
2406   2      
2407   2              if(!forward)
2408   2                  nextDir = prevDir;
2409   2              ret = USR_GetMediaFolderInfo(nextDir, &info);
2410   2      //printf("next=%u, %lu\n", nextDir, info.startCluster);
2411   2              if(ret == SUCCESS){
2412   3                  DOS_CurrDirSet(curDev, info.startCluster);
2413   3                  G_USR_Dir1Count = nextDir; 
2414   3              }
2415   2          }   
2416   1          return ret;
2417   1      }
2418          #endif
2419          
2420          #if MT_DEBUG
              void testMediaCnt()
              {
                  UINT16 dirCnt = G_USR_MinDir1Count;
                  UINT16 i;
                  FDBMediaFolderInfo_t info;
              
                  for(i = 0; i < G_USR_TotalDirectory; i ++){
                      USR_GetMediaFolderInfo(dirCnt, &info);
                      showInfo(&info);
                      dirCnt = info.nextCnt;
                  }
              
              #if 0//def MULTI_FOLDER_AS_ONE
                  //printf("dirTotal: %u, fileTotal: %lu, curDir: %u, firstFileIdx: %lu\n", 
                      G_USR_TotalDirectory, G_USR_MediaFileTotal, G_USR_Dir1Count, G_USR_CurFolderFirstFileIdx);
              #else
                  //printf("dirTotal: %u, curDir: %u\n", 
                      G_USR_TotalDirectory, G_USR_Dir1Count);
              #endif
                  //printf("G_USR_FileIndex=%u, G_USR_FileCount=%u\n", G_USR_FileIndex, G_USR_FileCount);
              }
              #endif
2443          
2444          #if 0//def MULTI_FOLDER_AS_ONE
              //-----------------------------------------------------------------------------
              //USR_InitMediaFolderInfo
              //goto the suitable folder
              //-----------------------------------------------------------------------------
              UINT8 USR_InitMediaFolderInfo()
              {
                  UINT8 ret = FAIL;
                  UINT8 sts;
                  UINT8 curDev;
                  FDB fdb;
                  UINT8 rootName[1+13]; // "\DCIM"
                  FDBMediaFolderInfo_t info;
                  UINT16 dirCnt, srhDir, nextDir, prevDir;  //100~999
                  UINT8 i;
                      
                  curDev = DOS_CurrDriverGet();
              
                  //goto DCIM 
                  rootName[0] = '\\';
                  dcfDir0NameGet(rootName+1);    
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 43  

                  rootName[13] = '\0';
                  if(DIR_Change(rootName) != DOS_SUCCESS)
                      return ret;
              
                  HAL_GprmDramFill(K_SDRAM_DcfDirBufAddr,(UINT16)(K_SDRAM_DcfDirBufSize / 2),0x00);
                  HAL_GprmDramFill(K_SDRAM_DcfDirBufAddr + (K_SDRAM_DcfDirBufSize / 2),(UINT16)(K_SDRAM_DcfDirBufSize / 
             -2),0x00);
                  G_USR_MaxDir1Count = 99;
                  G_USR_MinDir1Count = 1000;
                  G_USR_TotalDirectory = 0;
                  G_USR_MediaFileTotal = 0;
                  G_USR_Dir1Count = 0;
                  G_USR_CurFolderFirstFileIdx = 0;
                      
                  ret = SUCCESS;
                  while(1){
                      sts = DIR_Search(curDev, "*", (FDB *)&fdb, 0);
                      if(sts == FIND_FILE_FAIL){
                          break;
                      }        
                      else if(fdb.attr & ATTR_D && fdb.name[0] != '.'){
                          if( USR_GetMediaFolderCount(fdb.name, &dirCnt) == SUCCESS){
                              info.startCluster = fdb.start;
              
                              for(i=0; i < 8; i ++)
                                  info.name[i] = fdb.name[i];
                                  
                              info.ourDirMark = 0;
                              if(USR_IsOurMediaFolder(fdb.name))
                                  info.ourDirMark |= (UINT16)OUR_DIR_MARK;
              
                                                              
                              if(AddMediaFolderInfo(dirCnt, &info) == SUCCESS){
                                  G_USR_TotalDirectory ++;
                              }                
                          }
                      }        
                  }
              
                  //get file total of each folder, and find current folder
                  nextDir = G_USR_MinDir1Count;
                  do{            
                      srhDir = nextDir;
                      USR_GetMediaFolderInfo(srhDir, &info);
                      DOS_CurrDirSet(curDev, info.startCluster);
                      
                      dcfFileInitialize();
                      info.ourDirMark = (info.ourDirMark & OUR_DIR_MARK) + G_USR_FileCount;
                      USR_SetMediaFolderInfo(srhDir, &info);
              
                      if(G_USR_FileCount){
                          G_USR_CurFolderFirstFileIdx = G_USR_MediaFileTotal;
                          G_USR_Dir1Count = srhDir;
                      }
                      G_USR_MediaFileTotal += (UINT32)G_USR_FileCount;
                                      
                      USR_GetNextMediaFolderCnt(srhDir, &nextDir, &prevDir);
                  }while(nextDir != 0);
                  if(G_USR_Dir1Count == 0){ //all folder are empty
                      G_USR_Dir1Count = G_USR_MinDir1Count;
                      USR_GetMediaFolderInfo(G_USR_Dir1Count, &info);
                      DOS_CurrDirSet(curDev, info.startCluster);
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 44  

                      dcfFileInitialize();
                  }
                  else if(G_USR_Dir1Count != G_USR_MaxDir1Count){//last is empty
                      USR_GetMediaFolderInfo(G_USR_Dir1Count, &info);
                      DOS_CurrDirSet(curDev, info.startCluster);
                      dcfFileInitialize();
                  }
              
                  return ret;    
              }
              
              //-----------------------------------------------------------------------------
              //USR_NextFolder
              //return SUCCESS : folder changed
              //-----------------------------------------------------------------------------
              UINT8 USR_NextFolder(UINT8 forward, UINT8 isSkipEmpty, UINT8 isRepeat)
              {
                  UINT8 ret = FAIL;
                  UINT8 curDev;
                  UINT16 curDir, nextDir, prevDir;
                  FDBMediaFolderInfo_t info;
                  UINT16 curFileTotal, nextFileTotal;
                  UINT32 firstFileIndex;
              
                  if(G_USR_TotalDirectory <= 1)
                      return ret;
                  
                  curDev = DOS_CurrDriverGet();
                  curDir = G_USR_Dir1Count;
                  curFileTotal = G_USR_FileCount;
                  firstFileIndex = G_USR_CurFolderFirstFileIdx;        
                  do{
                      USR_GetNextMediaFolderCnt(curDir, &nextDir, &prevDir);
              #if MT_DEBUG
                      printf("change %u, %u, %u\n", curDir, nextDir, prevDir);
              #endif
                      if(nextDir == 0){//curDir is last
                          nextDir = G_USR_MinDir1Count;            
                      }
              
                      if(prevDir == 0){//curDir is first
                          prevDir = G_USR_MaxDir1Count;
                      }
              
                      if(!forward)
                          nextDir = prevDir;
                      
                      ret = USR_GetMediaFolderInfo(nextDir, &info); 
                      if(ret != SUCCESS)
                          break; //error
                      
                      nextFileTotal = info.ourDirMark & ~OUR_DIR_MARK;
                      
                      if(nextDir == G_USR_MinDir1Count)//first
                          firstFileIndex = 0;
                      else if(nextDir == G_USR_MaxDir1Count){//last
                          firstFileIndex = G_USR_MediaFileTotal - (UINT32)nextFileTotal;
                      }
                      else{
                          if(!forward){                    
                              firstFileIndex -= (UINT32)nextFileTotal;
                          }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 45  

                          else{
                              firstFileIndex += (UINT32)curFileTotal;
                          }
                      }
              
                      if(nextFileTotal || !isSkipEmpty){//found suitable folder
                          break;
                      }
                      
                      curDir = nextDir; 
                      curFileTotal = nextFileTotal;
              
                      if(!isRepeat && (curDir == G_USR_MinDir1Count || curDir == G_USR_MaxDir1Count))
                          break;
                  }while(curDir != G_USR_Dir1Count);
              
                  if(ret == SUCCESS){
                      DOS_CurrDirSet(curDev, info.startCluster);
                      G_USR_Dir1Count = nextDir;
                      G_USR_CurFolderFirstFileIdx = firstFileIndex;
                      G_USR_FileCount = nextFileTotal;
                  }
              
                  return ret;
              }
              
              //-----------------------------------------------------------------------------
              //USR_UpdateNewFolderInfo
              //update new folder info, at the upper dir of this folder 
              //-----------------------------------------------------------------------------
              UINT8 USR_UpdateNewFolderInfo(UINT8 *dirName)
              {
                  FDB fdb;
                  UINT8 sts;
                  UINT8 curDev;
                  UINT16 dirCnt;
                  FDBMediaFolderInfo_t info;
                  UINT8 i;
              
                  curDev = DOS_CurrDriverGet();
              
                  sts = DIR_Search(curDev, dirName, (FDB *)&fdb, 0);
                  if(sts == FIND_FILE_FAIL){
                      sts = FAIL;
                  }        
                  else if(fdb.attr & ATTR_D && fdb.name[0] != '.'){
                      if( USR_GetMediaFolderCount(fdb.name, &dirCnt) == SUCCESS){
                          info.startCluster = fdb.start;
              
                          for(i=0; i < 8; i ++)
                              info.name[i] = fdb.name[i];
                                          
                          info.ourDirMark = 0; //save file total also
                          if(USR_IsOurMediaFolder(fdb.name))
                              info.ourDirMark |= (UINT16)OUR_DIR_MARK;
                                                          
                          if(AddMediaFolderInfo(dirCnt, &info) == SUCCESS){
                              G_USR_TotalDirectory ++;
                          }                
                      }
                      sts = SUCCESS;
                  }                
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 46  

                      
                  return sts;
              }
              
              //-----------------------------------------------------------------------------
              //USR_UpdateCurFolderInfo
              //when current dir file cnt changed
              //-----------------------------------------------------------------------------
              UINT8 USR_UpdateCurFolderInfo(UINT8 mode )
              {
                  UINT8 curDev;
                  UINT32 curDir;
                  UINT16 srhDir, nextDir, prevDir;
                  FDBMediaFolderInfo_t info;
                  UINT16 fileTotal;
                  UINT16 i = 0;
                  UINT8 ret = FAIL;
              
              #if MT_DEBUG
                  printf("update mode=%bu\n", mode);
              #endif
              
                  curDev = DOS_CurrDriverGet();
                  curDir = DOS_CurrDirGet(curDev);
                  srhDir = G_USR_MinDir1Count;
                  do{            
                      USR_GetMediaFolderInfo(srhDir, &info);
                      if(curDir == info.startCluster){//found
                          fileTotal = info.ourDirMark & ~OUR_DIR_MARK; //org 
                          if(mode == K_UPDATE_MODE_ALL){
                              G_USR_MediaFileTotal = G_USR_MediaFileTotal - (UINT32)fileTotal;
              
                              dcfFileInitialize();
                              info.ourDirMark = (info.ourDirMark & OUR_DIR_MARK) + G_USR_FileCount;
                              G_USR_MediaFileTotal += (UINT32)G_USR_FileCount;
                          }
                          else if(mode == K_UPDATE_MODE_ADD_ONE){
                              G_USR_MediaFileTotal ++;
              //                G_USR_FileCount ++;
                              info.ourDirMark ++;
                          }
                          else if(mode == K_UPDATE_MODE_DEL_ONE){
                              G_USR_MediaFileTotal --;
              //                G_USR_FileCount --;
                              info.ourDirMark --;
                          }
              
                          USR_SetMediaFolderInfo(srhDir, &info);
                          ret = SUCCESS;
                          break;            
                      }
                                
                      USR_GetNextMediaFolderCnt(srhDir, &nextDir, &prevDir);
                      srhDir = nextDir;
                  }while(srhDir != 0);
              
                  return ret;
              }
              
              //-----------------------------------------------------------------------------
              //dcfDirInitialize
              //-----------------------------------------------------------------------------
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 47  

              static void USR_GetNextFolderName(UINT8 *name)
              {
                      UINT8 i, ch;
                      UINT16  rem;
              
                      rem = G_USR_Dir1Count + 1;
                      for (i = 2; i != 0xff ; i--)
                      {
                              ch = (UINT8) (rem % 10) + '0';
                              rem /= 10;
                              //printf("ch=%bx\n",ch);
                              name[i] = ch;
                      }                
                      name[8]  = '\0';
              }
              
              //-----------------------------------------------------------------------------
              //dcfDirInitialize
              //-----------------------------------------------------------------------------
              UINT8 dcfDirInitialize(void)
              {
                  UINT32 curDir;
                      UINT8 dirName[9] = "100MEDIA";
                      UINT8 sts = TRUE;
                      UINT8 DevId = DOS_CurrDriverGet();
              
                      dirName[8]  = '\0';
              //      printf("dcfDirInitialize = %bu\n",DevId);
              
                      sts = DIR_Change("DCIM"); 
                      if( sts != DOS_SUCCESS ){
                              sts = DIR_Create("DCIM");
                              if( sts != DOS_SUCCESS ) return FALSE; 
                              sts = DIR_Change("DCIM"); 
                              if( sts != DOS_SUCCESS ) return FALSE; 
                      }
              
                      sts = DIR_Change(dirName); //100MEDIA
                      if(sts != DOS_SUCCESS){
                      //printf("create new dir : %s\n", dirName);
                              sts = DIR_Create(dirName); 
                      sts = DIR_Change(dirName); 
                      }
                      if(sts == DOS_SUCCESS ){
                              sts = TRUE;
                      }
                      else{
                              sts = FALSE;
                      }
                  
                  USR_InitMediaFolderInfo();
                  if(G_USR_FileIndex >= 10000){//create new folder
                      curDir = DOS_CurrDirGet(DevId);
                      USR_GetNextFolderName(dirName);
                      if( DIR_Change("..") != DOS_SUCCESS ) return FALSE; 
              
                      sts = DIR_Change(dirName); 
                      if(sts != DOS_SUCCESS){
                              sts = DIR_Create(dirName); 
                          sts = USR_UpdateNewFolderInfo(dirName);
                          if(sts == SUCCESS)
                              sts = TRUE;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 48  

                          else
                              sts = FALSE;
                      }
                      else{
                          sts = TRUE;            
                      }
              
                      DOS_CurrDirSet(DevId, curDir);  //go back org folder
                  }
                  
                      return sts;
              }
              
              //-----------------------------------------------------------------------------
              //dcfDirInitialize
              //return SUCCESS : folder changed
              //-----------------------------------------------------------------------------
              UINT8 USR_LastFolder(UINT8 isSkipEmpty)
              {
                  UINT8 ret = FAIL;
                  UINT8 curDev;
                  UINT16 curDir, nextDir, prevDir;
                  FDBMediaFolderInfo_t info;
                  UINT16 fileTotal;
              
                  if(G_USR_TotalDirectory <= 1)
                      return ret;
                  
                  curDev = DOS_CurrDriverGet();
                  //curDir = G_USR_Dir1Count;
                  //curFileTotal = G_USR_FileCount;
                  //firstFileIndex = G_USR_CurFolderFirstFileIdx;
                  //printf("G_USR_Dir1Count=%u\n", G_USR_Dir1Count);
                  curDir = G_USR_MaxDir1Count;
                  do{
                      ret = USR_GetMediaFolderInfo(curDir, &info); 
                      if(ret != SUCCESS)
                          break; //error
              
                      fileTotal = info.ourDirMark & ~OUR_DIR_MARK;
                      if(fileTotal || !isSkipEmpty)
                          break; //success        
                      
                      USR_GetNextMediaFolderCnt(curDir, &nextDir, &prevDir);
                      
                      if(nextDir == 0){//curDir is last
                          nextDir = G_USR_MinDir1Count;            
                      }
              
                      if(prevDir == 0){//curDir is first
                          prevDir = G_USR_MaxDir1Count;
                      }
              
                      curDir = prevDir;                      
                  }while(curDir != G_USR_Dir1Count);
              #if MT_DEBUG
                  printf("set curDir=%u, ret=%bu\n", curDir, ret);
              #endif
                  if(curDir != G_USR_Dir1Count){//change folder
                      DOS_CurrDirSet(curDev, info.startCluster);
                      G_USR_Dir1Count = curDir;
                      G_USR_CurFolderFirstFileIdx = G_USR_MediaFileTotal - fileTotal;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 49  

                      dcfFileInitialize();
                  }
                  else
                      ret = FAIL;
              
                  return ret;
              }
              
              UINT32 USR_GetMediaFileTotal()
              {
                  return G_USR_MediaFileTotal;
              }
              
              UINT32 USR_GetCurFolderFirstFileIdx()
              {
                  return G_USR_CurFolderFirstFileIdx;
              }
              
              #endif //MULTI_FOLDER_AS_ONE
2855          
2856          //xian --
2857          
2858          //xain ++ 20080826
2859          //-----------------------------------------------------------------------------
2860          //dcfFileTypeEnable
2861          //-----------------------------------------------------------------------------
2862          void dcfFileTypeEnable(UINT8 type, UINT8 en)
2863          {
2864   1          UINT8 mask;
2865   1          
2866   1          switch(type){
2867   2              case 0:
2868   2                  mask = K_USR_JPG_TYPE_MASK | K_USR_AVI_TYPE_MASK | K_USR_WAV_TYPE_MASK | K_USR_WGI_TYPE_MASK;
2869   2                  break;
2870   2                  
2871   2              case K_DCF_JPG_TYPE:
2872   2                  mask = K_USR_JPG_TYPE_MASK;
2873   2                  break;                
2874   2              case K_DCF_AVI_TYPE:
2875   2                  mask = K_USR_AVI_TYPE_MASK;
2876   2                  break;
2877   2              case K_DCF_WAV_TYPE:
2878   2                  mask = K_USR_WAV_TYPE_MASK;
2879   2                  break;
2880   2                      case K_DCF_WGI_TYPE:
2881   2                              mask = K_USR_WGI_TYPE_MASK;
2882   2                              break;
2883   2              default:
2884   2                  return;            
2885   2          }
2886   1          if(en)
2887   1              G_DCF_FileType_Mask &= ~mask;
2888   1          else
2889   1              G_DCF_FileType_Mask |= mask;
2890   1      
2891   1          //printf("G_DCF_FileType_Mask=%bx\n", G_DCF_FileType_Mask);
2892   1      }
2893          
2894          //xian ++ 20081203
2895          UINT8 dcfFileIndexUpdate(void)
2896          {
2897   1         // UINT8 dirName[9] = "100MEDIA";
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 50  

2898   1              UINT8 dirName[12];  //modified by rhy 20110504
2899   1          FDBMediaFolderInfo_t info;
2900   1              UINT16 dirCnt;
2901   1              
2902   1              dcfInitDir1NameGet(dirName);
2903   1              if(G_USR_bUsrAssignFolder){//xian ++ 20100223, dont change folder
2904   2                      if(G_USR_FileIndex > 9999){
2905   3                              G_USR_FileIndex = 1;
2906   3                      }                       
2907   2                      return TRUE;
2908   2              }
2909   1      
2910   1              if(1 != sp1kSnapParamGet(SP1K_SNAP_TIMESLAPE_PAUSE) && sp1kSnapParamGet(SP1K_SNAP_TIMESLAPE_STS) ){
2911   2                      dirCnt = G_USR_MaxTlsVidDirCnt;
2912   2              }else{
2913   2                      dirCnt = G_USR_MaxNormalDirCnt;
2914   2              }
2915   1          //goto last folder
2916   1          if(G_USR_Dir1Count < dirCnt){
2917   2              do{
2918   3                  dcfFolderNext(1);
2919   3              }while(G_USR_Dir1Count < G_USR_MaxDir1Count);
2920   2              dcfFileInitialize();
2921   2          }
2922   1          else if(G_USR_Dir1Count > dirCnt) { 
2923   2              do{
2924   3                      dcfFolderNext(0);
2925   3              }while(G_USR_Dir1Count > dirCnt);
2926   2                       dcfFileInitialize();
2927   2          }
2928   1      
2929   1          //xian ++ 20090116
2930   1          USR_GetMediaFolderInfo(G_USR_Dir1Count, &info);
2931   1          #if 0//def MULTI_FOLDER_AS_ONE
                  info.ourDirMark &= (UINT16)OUR_DIR_MARK;
                  #endif
2934   1          //xian --
2935   1      
2936   1          if(G_USR_FileIndex > 9999 || !info.ourDirMark){
2937   2                      if(info.ourDirMark == 0xfff0){ //timelapse folder
2938   3                              dcfDir1NameGet(dirName,0,TIMELAPSE_VIDEOFOLDER);
2939   3                      }
2940   2                      
2941   2              if( USR_CheckMediaFolder(dirName) != TRUE ){
2942   3                              osMsgPost(SP1K_MSG_CARD_DCFFOLDER_FULL); //add by rhy20110921
2943   3                              return FALSE;
2944   3              }
2945   2              //printf("create dirName=%s\n", dirName);
2946   2              if( DIR_Create(dirName) != DOS_SUCCESS ){
2947   3                              return FALSE;
2948   3              }
2949   2              if( DIR_Change(dirName) != DOS_SUCCESS ) {
2950   3                              return FALSE;
2951   3              }
2952   2      #if 0//def MULTI_FOLDER_AS_ONE  //xian ++ 20080806
                      USR_UpdateNewFolderInfo(dirName);
              #else
2955   2              USR_UpdateMediaFolderInfo();    //xian ++ 20081203, #33748
2956   2      #endif
2957   2      
2958   2              dcfFileInitialize();
2959   2          }
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 51  

2960   1          //printf("fileIdx:%u\n", G_USR_FileIndex);
2961   1          return TRUE;
2962   1      }
2963          //xian --
2964          
2965          //xian ++ 20090107
2966          void dcfFileBaseNameUpdate(UINT8 *name)
2967          {
2968   1          UINT8 i;
2969   1      
2970   1          for(i = 0; i < 4; i++){
2971   2              if(*name >= 'A' && *name <= 'Z'){
2972   3                  G_USR_Company_UpperSIG[i] = *name;
2973   3                  G_USR_Company_LowerSIG[i] = *name - 'A' + 'a';
2974   3              }
2975   2              else if(*name == '_'){
2976   3                  G_USR_Company_UpperSIG[i] = *name;
2977   3                  G_USR_Company_LowerSIG[i] = *name;
2978   3              }
2979   2                  
2980   2              name ++;
2981   2          }
2982   1      }
2983          //xian --
2984          #if 0
              //xian ++ 20090112
              //return handle
              UINT32 USR_MakeDPSFileHandle(UINT16 fileOrd)
              {
                  UINT32 addr;
                  UINT8 tmp1, tmp2;
                  UINT16 fileCnt; //0001~9999 < 2^14
                  UINT32 handle;
                  UINT8 dev;
                  FDBInfo_t fileInfo;
                  FDBMediaFolderInfo_t dirInfo;
              
                  USR_GetMediaFolderInfo(G_USR_Dir1Count, &dirInfo);
              
                  if(!(dirInfo.ourDirMark&0x8000))  //OUR_DIR_MARK
                      return 0; // dir not supported
                  
                      if(fileOrd > G_USR_FileCount) {
                              return 0;
                      }
                      
                      addr = K_SDRAM_FileOrderTableAddr + (fileOrd - 1);
                      HAL_DramStartAddrSet(addr , K_SDRAM_Prefetch);
                      HAL_DramWordDataRead(&tmp1, &tmp2);
                      fileCnt = (UINT16)(((UINT16)tmp2) <<8) +( (UINT16)tmp1);
              
                  dcfFileDramFdbParameterRead(fileCnt, &fileInfo);
                  if(fileInfo.FileType != K_DCF_JPG_TYPE || !USR_IsOurBaseName(fileInfo.FileName))
                      return 0; // file not supported
              
                  handle = G_USR_Dir1Count;   //100~999 < 2^10
                  handle <<= 16; // ;2^14 = 16384
                  handle += (UINT32)fileCnt;
              
                  dev = DOS_CurrDriverGet();
                  if(dev > 0xf)
                      return 0; //only support 0~15
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 52  

                  
                  handle += ((UINT32)dev << 26);
                      
                  return handle;
              }
              //return TRUE/FALSE
              UINT8 USR_ParseDPSFileHandle(UINT32 handle, UINT8* outPathFilename)
              {
                  UINT16 fileCnt;
                  UINT16 dirCnt;
                  UINT8 dev;
                  UINT8 i;
                  UINT8 *pt = outPathFilename;
              
                  fileCnt = (UINT16)handle & 0x3fff;
                  dirCnt = (UINT16)(handle >> 16) & 0x3ff;
                  dev = (UINT8)(handle >> 26) & 0x0f;
              
                  switch(dev){
                      case DRIVE_NAND:
                          *pt ++ = 'C';
                          break;
                      case DRIVE_SD:
                          *pt ++ = 'D';
                          break;
                      case DRIVE_DRAM:
                          *pt ++ = 'E';
                          break;
              #if (DOS_RSV_PART == 1)
                      case DRIVE_NAND_RSV:
                          *pt ++ = 'F';
                          break;
              #endif
                      default:
                          *pt = 0;
                          return FALSE;                
                  }
                  *pt ++ = ':';
                  *pt ++ = '\\';
                          
                      for ( i = 0; i < 4; i++ )
                      *pt ++  = G_USR_Dir0Name[i];    //DCIM
                  *pt ++ = '\\';
              
                  pt += 7;
                  for(i = 7; i > 2; i--)
                      *pt -- = G_USR_Dir1Name[i];    //; 100MEDIA
                  i = 3;
                  while(i){
                      *pt -- = '0' + dirCnt%10;
                      dirCnt /= 10;
                      i --;
                  };           
                  pt += 9;
                  *pt ++ = '\\';
                  
                  dcfBaseNameGet(pt, fileCnt);    
                  pt += 8;
                  *pt ++ = '.';
                  *pt ++ = 'J';
                  *pt ++ = 'P';
                  *pt ++ = 'G';
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 53  

                  *pt = 0;
              
                  return TRUE;    
              }
              //xian --
              #endif
3090          void dcfNewFileDramFdbParameterUpdate(UINT8 fileType, UINT32 fileSize)
3091          {
3092   1              G_USR_NewFileSizeInFdb = fileSize;
3093   1      
3094   1              dcfFileDramFdbParameterWrite(fileType, G_USR_FileIndex);
3095   1              G_USR_LastFileIndex = G_USR_FileIndex; //yichang@0510
3096   1      
3097   1              if (G_USR_FileCount == 0)
3098   1              {
3099   2                      G_USR_FirstFileIndex = G_USR_FileIndex;
3100   2              }
3101   1          
3102   1              G_USR_AllFolderFileTotal++; //cx add for multi folder pb
3103   1              G_USR_FileIndex ++;
3104   1              G_USR_FileCount++;
3105   1              DOS_FileOrderWrite(G_USR_FileCount , G_USR_LastFileIndex);
3106   1      }
3107          
3108          UINT16 dcfFileIndexGet(void)
3109          {
3110   1              return  G_USR_FileIndex;
3111   1      }
3112          
3113          UINT16 dcfFileCountGet(void)
3114          {
3115   1              return G_USR_FileCount;
3116   1      }
3117          
3118          UINT16 dcfTotalDirectoryGet(void)
3119          {
3120   1              return G_USR_TotalDirectory;
3121   1      }
3122          
3123          UINT16 dcfDir1IndexGet(void)
3124          {
3125   1              return G_USR_Dir1Count;
3126   1      }
3127          
3128          UINT32 dcfAllFolderTotalFileGet(void)
3129          {
3130   1              return G_USR_AllFolderFileTotal;
3131   1      }
3132          
3133          //wangjg++ 20100930
3134          void dcfProtectAllFile(UINT8 isReadOnly)
3135          {
3136   1      #if 1
3137   1              UINT8 sts;
3138   1              UINT16 TempDirIndex;
3139   1              UINT8 tmp1,tmp2;
3140   1      
3141   1              UINT32 addr = K_SDRAM_JPG_FdbParameterBufAddr;
3142   1              UINT32 i;
3143   1              UINT16 diridx=G_USR_Dir1Count;
3144   1              UINT16 fileCnt = G_USR_FileCount;//(G_USR_AllFolderFileTotal>9999) ? 9999:G_USR_AllFolderFileTotal;
3145   1              //UINT16 cnt=G_USR_Dir1Count;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 54  

3146   1              //UINT8 CurrDirName[9]; 
3147   1              UINT8 buf[sizeof(FDBMediaFolderInfo_t) + 1];
3148   1              FDBMediaFolderInfo_t *info = (FDBMediaFolderInfo_t *)buf;
3149   1              UINT8 *CurrDirName;
3150   1              //UINT32 t0,t1,t2;
3151   1              //x86_FDB xdata *pFdb;
3152   1              //UINT8 devId= DOS_CurrDriverGet();
3153   1              //UINT32 dirId = DOS_CurrDirGet(devId);
3154   1      
3155   1              isReadOnly = isReadOnly?0x01:0;
3156   1      
3157   1              //HAL_GlobalTimerRead10us(&t0);
3158   1              TempDirIndex = G_USR_MaxDir1Count;
3159   1              DIR_Change("\\DCIM"); //xian ++
3160   1              ENTER_CRITICAL(sts);
3161   1              //HAL_CpuRamMapSet(dos.TmpBufAddr, 512, (void xdata* xdata*)&pFdb);
3162   1      
3163   1              do{
3164   2                      //G_USR_Dir1Count = TempDirIndex;       //xian -- #42012
3165   2                      //sprintf(CurrDirName, "%d",TempDirIndex); 
3166   2                      //strcat(CurrDirName, "MEDIA"); 
3167   2                      USR_GetMediaFolderInfo(TempDirIndex, info); //xian ++, #40739 maybe not "MEDIA"
3168   2                      CurrDirName = info->name;
3169   2                      CurrDirName[8] = 0;
3170   2                      DIR_Change(CurrDirName);  
3171   2      
3172   2                      __FUNC_TRACK__;
3173   2                      sts = vfsFileProtectAll(isReadOnly);
3174   2                      __FUNC_TRACK__;
3175   2      
3176   2                      DIR_Change("\\DCIM"); 
3177   2                      HAL_DramStartAddrSet((K_SDRAM_DcfDirBufAddr + (((UINT32)TempDirIndex) - 100) * 9 + 7),K_SDRAM_Prefetch);
3178   2                      HAL_DramWordDataRead(&tmp1,&tmp2);
3179   2      
3180   2                      TempDirIndex = (((UINT16)tmp2) << 8) | ((UINT16)tmp1);
3181   2              }while(TempDirIndex != 0);
3182   1              //HAL_GlobalTimerRead10us(&t1);
3183   1              //DIR_Change("..");
3184   1              //__FUNC_TRACK__;
3185   1              //dcfDirInitialize();   
3186   1              USR_GetMediaFolderInfo(diridx, info); //xian ++, #40739 maybe not "MEDIA"
3187   1              CurrDirName = info->name;
3188   1              CurrDirName[8] = 0;
3189   1              DIR_Change(CurrDirName);  
3190   1              addr +=2;
3191   1              for(i = 1;i<=9999;i++)
3192   1              {                       
3193   2                      HAL_DramStartAddrSet(addr,1);
3194   2                      HAL_DramWordDataRead(&tmp1,&tmp2);
3195   2      
3196   2                      HAL_DramStartAddrSet(addr,0);           
3197   2                      HAL_DramWordDataWrite((tmp1&0xfe)|isReadOnly,tmp2);
3198   2                      addr += 10;// * 10ul;   
3199   2              }
3200   1              //DOS_CurrDirSet(devId, dirId);
3201   1              //HAL_GlobalTimerRead10us(&t2);
3202   1              EXIT_CRITICAL(sts);
3203   1              //printf("protect:%ld,%ld,%d\n",t1-t0,t2-t1,fileCnt);
3204   1      #endif
3205   1      }
3206          void dcfDeleteAllFile(void)
3207          {
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 55  

3208   1              UINT8 sts;
3209   1              UINT16 TempDirIndex;
3210   1              UINT8 tmp1,tmp2;
3211   1              //UINT8 CurrDirName[9]; 
3212   1              UINT8 buf[sizeof(FDBMediaFolderInfo_t) + 1];
3213   1              FDBMediaFolderInfo_t *info = (FDBMediaFolderInfo_t *)buf;
3214   1              UINT8 CurrDirName[9];
3215   1              //UINT32 t0,t1,t2,t3;
3216   1              UINT8 i;
3217   1              //UINT8 name[8];
3218   1              UINT32 addr = K_SDRAM_TotalSize -512 - 320ul*240;
3219   1              UINT8 ret;
3220   1              //HAL_GlobalTimerRead10us(&t0);
3221   1              TempDirIndex = G_USR_MaxDir1Count;
3222   1              #if !SUPPORT_MCU_WTD
                      ENTER_CRITICAL(ret);
                      #endif
3225   1              DIR_Change("\\DCIM"); //xian ++
3226   1              //HAL_GprmDramFill(K_SDRAM_ImagePlaybackDisplayBufAddr,320ul*240*2,0);
3227   1              //HAL_GprmCopy(pbDispBuffGet(1),UINT16 srcHSize,UINT16 srcVSize,UINT16 srcHOft,UINT16 srcVOft,UINT32 dstA
             -ddrWord,UINT16 dstHSize,UINT16 dstVSize,UINT16 dstHOft,UINT16 dstVOft,UINT16 cpHSize,UINT16 cpVSize,UINT16 pstThd,UINT8
3228   1              gprmBlackFill(addr,320,240);
3229   1              dispShow(addr,320,240,100);
3230   1              dbgWdtSet(0);
3231   1              //HAL_GlobalTimerRead10us(&t2);
3232   1              do{
3233   2      #if 0
                              G_USR_Dir1Count = TempDirIndex;
                              //sprintf(CurrDirName, "%d",TempDirIndex); 
                              //strcat(CurrDirName, "MEDIA"); 
                              USR_GetMediaFolderInfo(TempDirIndex, info); //xian ++, #40739 maybe not "MEDIA"
                              CurrDirName = info->name;
                              CurrDirName[8] = 0;
              #endif
3241   2                      HAL_DramStartAddrSet((K_SDRAM_DcfDirBufAddr + (((UINT32)TempDirIndex) - 100) * 9 + 3),K_SDRAM_Prefetch);
3242   2      
3243   2                      for(i = 0; i < 8; i+=2){
3244   3                              HAL_DramWordDataRead(&tmp1, &tmp2);
3245   3                              CurrDirName[i] = tmp1;
3246   3                              CurrDirName[i+1] = tmp2;
3247   3                      }
3248   2                      CurrDirName[8]=0;
3249   2                      printf("%s\n",CurrDirName);
3250   2                      HAL_DramWordDataRead(&tmp1, &tmp2);
3251   2                      WRITE8(TempDirIndex, 1, tmp1);
3252   2                      WRITE8(TempDirIndex, 0, tmp2);
3253   2                      DIR_Change(CurrDirName);  
3254   2      
3255   2                      //dbgWdtSet(0);         
3256   2                      sts = vfsFileDeleteAll();//(K_DCF_ALL_DCF_FILE, K_DCF_OUR_TYPE);                
3257   2                      if(sts != TRUE){ //error
3258   3                              break;
3259   3                      }
3260   2                      //dbgWdtSet(1);
3261   2                      DIR_Change("\\DCIM"); 
3262   2                      DIR_Remove(CurrDirName); 
3263   2      
3264   2                      //HAL_DramStartAddrSet((K_SDRAM_DcfDirBufAddr + (((UINT32)TempDirIndex) - 100) * 9 + 7),K_SDRAM_Prefetch
             -);
3265   2                      //HAL_DramWordDataRead(&tmp1,&tmp2);
3266   2      
3267   2                      //TempDirIndex = (((UINT16)tmp2) << 8) | ((UINT16)tmp1);
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 56  

3268   2              }while(TempDirIndex != 0);
3269   1              //HAL_GlobalTimerRead10us(&t3);
3270   1              dbgWdtSet(1);
3271   1              //HAL_GprmDramFill(pbDispBuffGet(1),960ul*720*2,0);
3272   1              gprmBlackFill(pbDispBuffGet(0),960,720);
3273   1              gprmBlackFill(pbDispBuffGet(1),960,720);
3274   1              //HAL_GprmCopy(pbDispBuffGet(1),UINT16 srcHSize,UINT16 srcVSize,UINT16 srcHOft,UINT16 srcVOft,UINT32 dstA
             -ddrWord,UINT16 dstHSize,UINT16 dstVSize,UINT16 dstHOft,UINT16 dstVOft,UINT16 cpHSize,UINT16 cpVSize,UINT16 pstThd,UINT8
3275   1              dispShow(pbDispBuffGet(1),960,720,100);
3276   1              DIR_Change("..");
3277   1              //__FUNC_TRACK__;
3278   1              //HAL_GlobalTimerRead10us(&t1);
3279   1              //printf("Del All:%ld,%ld\n",t1-t0,t3-t2);
3280   1              dcfDirInitialize();     
3281   1              #if !SUPPORT_MCU_WTD
                      EXIT_CRITICAL(ret);
                      #endif
3284   1      }
*** WARNING C280 IN LINE 3219 OF D\DOS_USR.C: 'ret': unreferenced local variable
3285          //wangjg++
3286          UINT8 dcfGetFileName(UINT8 *name,UINT16 index,UINT8 *pAttr)
3287          {
3288   1              UINT8 *pt = name;
3289   1              UINT8 type,attr;
3290   1              UINT32 addr = K_SDRAM_JPG_FdbParameterBufAddr + (UINT32)10*(index-1);
3291   1              UINT8 extName[][4]={"XXX","JPG","AVI","WAV"};
3292   1              HAL_DramStartAddrSet( addr + 2,1);
3293   1              HAL_DramWordDataRead(&attr,&type);
3294   1              HAL_DramStartAddrSet( addr + 6,1);
3295   1              HAL_DramWordDataRead(pt++,pt++);
3296   1              HAL_DramWordDataRead(pt++,pt++);
3297   1              if(type>K_DCF_WAV_TYPE){type=0;}
3298   1              sprintf(pt,"%04u%s",index,extName[type]);
3299   1              pt[7]=0;
3300   1              /*
3301   1              pt+=4;
3302   1              
3303   1              switch(type)
3304   1              {
3305   1              case K_DCF_JPG_TYPE:
3306   1                      *pt ++ = 'J';
3307   1                      *pt ++ = 'P';
3308   1                      *pt ++ = 'G';
3309   1                      break;
3310   1              case K_DCF_AVI_TYPE:
3311   1                      *pt ++ = 'A';
3312   1                      *pt ++ = 'V';
3313   1                      *pt ++ = 'I';
3314   1                      break;
3315   1              case K_DCF_WAV_TYPE:
3316   1                      *pt ++ = 'W';
3317   1                      *pt ++ = 'A';
3318   1                      *pt ++ = 'V';
3319   1                      break;
3320   1              default:
3321   1                      *pt ++ = 'X';
3322   1                      *pt ++ = 'X';
3323   1                      *pt ++ = 'X';
3324   1                      *pt = 0;
3325   1                      return FAIL;
3326   1                      //break;
3327   1              }               
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 57  

3328   1          *pt = 0;    
3329   1          */
3330   1          //printf("%s\n",name);
3331   1              //printf("%s--%u,%bu,%bu\n",name,index,attr,type);
3332   1              if(pAttr){
3333   2                      *pAttr=attr;
3334   2                      }
3335   1              return type;
3336   1      }
3337          UINT8 dcfDeleteFile(UINT16 order,UINT8 isUpdateDCF,UINT8 filterType)
3338          {
3339   1              //UINT16 idx = sp1kPbFileIndexByOrderGet(1);
3340   1              UINT8 name[12];
3341   1              UINT8 sts = SUCCESS;
3342   1              UINT16 index = DOS_FileIndexGet(order);
3343   1              UINT32 t0,t1;
3344   1              UINT8 type,attr;
3345   1              //UINT8 ret;
3346   1              HAL_GlobalReadGTimer(&t0);
3347   1              if(index==0){
3348   2                      //printf("no file\n");
3349   2                      return 2;
3350   2              }
3351   1              
3352   1              //get file name
3353   1              type = dcfGetFileName(name,index,&attr);
3354   1              //printf("type=%bu\n",type);
3355   1              //printf("dcfDel:%s\n",name);
3356   1              //#if VIDEO_SLCLIP_FILE_NOT_DELETE_READONLY
3357   1              if(attr&0x01){
3358   2                      //HAL_GlobalReadGTimer(&t1);
3359   2                      //printf("###dcfDel:%lu\n",t1-t0);
3360   2                      //printf("readonly\n");
3361   2                      return FAIL;
3362   2              }
3363   1              
3364   1              if(filterType && (type!=filterType)){   
3365   2                      printf("type:%bx-%bx\n",type,filterType);
3366   2                      return FAIL;            
3367   2              }
3368   1              /*#else
3369   1              if(filterType && (type!=filterType)){   
3370   1                      printf("type:%bx-%bx\n",type,filterType);
3371   1                      return SUCCESS;         
3372   1              }
3373   1              #endif
3374   1              */
3375   1              //dcfAviNameGet(sldeletefinename, index);
3376   1              sts = DOS_FileDel(name);
3377   1              //vidClipCtrl.freeCluster = DOS_FreeDiskSpaceByCluster();
3378   1              if(isUpdateDCF && (sts==SUCCESS)){
3379   2                      dcfFileDramFdbParameterClear(K_DCF_OUR_TYPE, index);
3380   2                      DOS_FIleOrderRst(order);
3381   2                      DOS_FileLastIndexClear();
3382   2              }               
3383   1              HAL_GlobalReadGTimer(&t1);
3384   1              printf("dcfDel:%s-%4u-%lu-%bu\n",name,index,t1-t0,sts);
3385   1              return sts?1:0;
3386   1      }
3387          
3388          void dcfDeleteFolder(UINT16 FolderIndex)
3389          {
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 58  

3390   1      #if 1
3391   1              UINT8 buf[sizeof(FDBMediaFolderInfo_t) + 1];
3392   1              FDBMediaFolderInfo_t *info = (FDBMediaFolderInfo_t *)buf;
3393   1              UINT8 *CurrDirName;
3394   1           
3395   1              USR_GetMediaFolderInfo(FolderIndex, info); //xian ++, #40739 maybe not "MEDIA"
3396   1              CurrDirName = info->name;
3397   1              CurrDirName[8] = 0;
3398   1      
3399   1              DIR_Change("\\DCIM"); 
3400   1              DIR_Remove(CurrDirName); 
3401   1              DIR_Change("..");
3402   1              dcfDirInitialize();     
3403   1      #endif
3404   1      }
3405          
3406          UINT8 dcfMediaFolderAssign(UINT8 en, UINT16 folderIdx)
3407          {
3408   1      #if 1
3409   1              FDBMediaFolderInfo_t info;
3410   1          UINT8 dirName[9];
3411   1              UINT16 dirCountSv;
3412   1              UINT8 sts = SUCCESS;
3413   1      
3414   1              G_USR_bUsrAssignFolder = en;
3415   1              if(en && folderIdx >= 100 && folderIdx <= 999 ){                
3416   2                      G_USR_UsrAssignFolderCount = folderIdx;
3417   2                      dirCountSv = G_USR_Dir1Count;
3418   2                      
3419   2                  //goto assign folder
3420   2                  if(G_USR_Dir1Count != folderIdx){//not current dir
3421   3                              USR_GetMediaFolderInfo(folderIdx, &info);
3422   3                              if(info.name[0] == 0){ //folder not existed
3423   4                                      dcfDir1NameGet(dirName, folderIdx,NORMAL_SNAPFOLDER);
3424   4                                      sts = DIR_Change(".."); 
3425   4                                      sts = DIR_Create(dirName); 
3426   4                                      sts = DIR_Change(dirName);
3427   4                                      if(sts != DOS_SUCCESS){
3428   5                                              sts = FAIL;
3429   5                                              ASSERT(0, 1);
3430   5                                      }
3431   4                                      else{
3432   5                                              USR_UpdateMediaFolderInfo();
3433   5                                              dcfFileInitialize();
3434   5                                      }
3435   4                              }
3436   3                              else{
3437   4                                      do{
3438   5                                              dcfFolderNext(1);               
3439   5                                      }while(G_USR_Dir1Count != folderIdx && dirCountSv != G_USR_Dir1Count);
3440   4                                      if(G_USR_Dir1Count == folderIdx){//found
3441   5                                              dcfFileInitialize();
3442   5                                      }
3443   4                                      else{
3444   5                                              sts = FAIL;
3445   5                                              ASSERT(0, 1);
3446   5                                      }
3447   4                              }
3448   3                              
3449   3                  }
3450   2              }
3451   1      
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 59  

3452   1              if(sts == FAIL){
3453   2                      G_USR_bUsrAssignFolder = 0;
3454   2              }
3455   1      
3456   1              return sts;
3457   1      #endif
3458   1      }
3459          
3460          /*
3461          UINT8 dcfBaseNameSet(UINT8 * fileName)
3462          {
3463                  UINT8 i;
3464                  for ( i = 0; i < 12; i++ ){
3465                          G_USR_Company_UpperSIG[i] = fileName[i];
3466                  }       
3467                  //printf("fileName=%s\n",G_USR_Company_UpperSIG);  
3468                  return SUCCESS;
3469          }
3470          */
3471          
3472          UINT8 dcfDir1NameSet(TLSMod_e opt,UINT8 *dirName)
3473          {
3474   1              UINT8 i;
3475   1              switch(opt){
3476   2                      case NORMAL_SNAPFOLDER:
3477   2                              for ( i = 3; i < 8; i++ ){
3478   3                                      G_USR_Dir1Name[i] = dirName[i];
3479   3                              }
3480   2                      break;
3481   2                      case TIMELAPSE_VIDEOFOLDER:
3482   2                              for ( i = 3; i < 8; i++ ){
3483   3                                      G_USR_TLSVIDDirName[i] = dirName[i];
3484   3                              }
3485   2                      break;
3486   2              }
3487   1              
3488   1              //printf("dirName=%s\n",G_USR_Dir1Name);  
3489   1              return SUCCESS;
3490   1      }
3491          
3492          void dcfDir1NameGet(UINT8* name, UINT16 dirIndex,UINT8 opt) USING_0
3493          {
3494   1              UINT8 i;
3495   1              UINT8 ch;
3496   1              UINT16 rem = dirIndex;
3497   1              xdata UINT8 *dirName = NULL;
3498   1              
3499   1              switch(opt){
3500   2                      case NORMAL_SNAPFOLDER:
3501   2                              dirName = G_USR_Dir1Name;
3502   2                      break;
3503   2                      case TIMELAPSE_VIDEOFOLDER:
3504   2                              dirName = G_USR_TLSVIDDirName;
3505   2                      break;
3506   2              }
3507   1              
3508   1              for ( i = 0; i < 12; i++ ){
3509   2                      name[i]  = dirName[i];
3510   2              }
3511   1              for (i = 2; i != 0xff; i--){
3512   2                  ch = (UINT8) (rem % 10) + '0';
3513   2                  rem /= 10;
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 60  

3514   2                  name[i] = ch;
3515   2              }
3516   1      }
3517          
3518          UINT8 dcfTLSAssignFolder()
3519          {
3520   1          UINT8 dirName[12];
3521   1              UINT8 sts = SUCCESS;
3522   1              FDBMediaFolderInfo_t info;
3523   1              UINT16 folderIdx;
3524   1      
3525   1      //      printf("n=%u,t=%u\n",G_USR_MaxNormalDirCnt,G_USR_MaxTlsVidDirCnt);
3526   1              if(G_USR_MaxTlsVidDirCnt == 0){
3527   2                      folderIdx = G_USR_MaxNormalDirCnt + 1;
3528   2              }
3529   1              else{
3530   2                      folderIdx = G_USR_MaxTlsVidDirCnt;
3531   2              }
3532   1      
3533   1      //      printf("folder=%u\n",folderIdx);
3534   1              if(folderIdx >= 100 && folderIdx <= 999){
3535   2                      USR_GetMediaFolderInfo(folderIdx, &info);
3536   2                      dcfDir1NameGet(dirName, folderIdx,TIMELAPSE_VIDEOFOLDER);
3537   2                      if(info.name[0] == 0){ //folder not existed
3538   3                              sts = DIR_Change(".."); 
3539   3                              sts = DIR_Create(dirName); 
3540   3                              sts = DIR_Change(dirName);
3541   3                              if(sts != DOS_SUCCESS){
3542   4                                      return FAIL;
3543   4                              }       
3544   3                      }
3545   2                      else{
3546   3                              sts = DIR_Change(".."); 
3547   3                              sts = DIR_Change(dirName); 
3548   3      
3549   3                              if(sts != DOS_SUCCESS){
3550   4                                      printf("Line=%d\n",__LINE__);
3551   4                                      return FAIL;
3552   4                              }
3553   3                               
3554   3                      }
3555   2                      USR_UpdateMediaFolderInfo();
3556   2                      dcfFileInitialize();
3557   2              }
3558   1              else{
3559   2                      sts = FAIL;
3560   2              }
3561   1              
3562   1              return sts;
3563   1      }
3564          
3565          void dcfQuickInitSet(UINT8 enable)
3566          {
3567   1      
3568   1              dcfQuickInit = enable?1:0;
3569   1      }
3570          
3571          UINT8 dcfQuickInitStsGet(void)
3572          {
3573   1      
3574   1              return dcfQuickInit;
3575   1      
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 61  

3576   1      }
3577          
3578          //xian ++, 20120105,
3579          static void dcfFileDramFdbUpdate(       UINT8 fno)
3580          {
3581   1              xdata FILE *file;
3582   1              xdata x86_FDB *fdb;//, tmpFdb;
3583   1              UINT8 fileType = 0;
3584   1              UINT8 i8;
3585   1              UINT16 index = 0;
3586   1      
3587   1              file = (FILE *)&dos.file[fno];
3588   1              fdb  = (x86_FDB *)&file->fdb;
3589   1      
3590   1              //add for change the file attribute and name 
3591   1              fileType = USR_FileExist((UINT8 *)fdb);
3592   1              
3593   1              G_DOS_FdbAddress = ((UINT32)file->FDB_Sector << 4) + ((UINT32)file->FDB_Idx);
3594   1      
3595   1              //printf("name:%s\n",fdb->name);
3596   1              for (i8 = 4; i8 < 8; i8++)
3597   1              {
3598   2                      index = index * 10 + (fdb->name[i8] - 0x30);
3599   2              }
3600   1              //printf("idx:%u\n",index);
3601   1              //if( G_USR_SearchNowFileIndex == 0 )
3602   1              //{
3603   1                      G_USR_SearchNowFileIndex = index;
3604   1              //}
3605   1          HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 10)
             -,K_SDRAM_NoPrefetch);
3606   1              //printf("Vfs ADDR=%lx\n",(K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 1
             -0));
3607   1              //printf("now idx:%u\n",G_USR_SearchNowFileIndex);
3608   1          //HAL_DramStartAddrSet((K_SDRAM_AVI_FdbParameterBufAddr + (((UINT32)G_USR_SearchNowFileIndex) - 1) * 8
             -),K_SDRAM_NoPrefetch);
3609   1              //patch4.5@ada@Record DCF file name end
3610   1              
3611   1          //Record file FDB logical address
3612   1              HAL_DramWordDataWrite((UINT8)(G_DOS_FdbAddress & 0x000000ff),(UINT8)((G_DOS_FdbAddress & 0x0000ff00) >> 8
             -));
3613   1              HAL_DramWordDataWrite((UINT8)((G_DOS_FdbAddress & 0x00ff0000) >> 16),(UINT8)((G_DOS_FdbAddress & 0xff0000
             -00) >> 24));
3614   1          //Record file attribute and file type
3615   1              HAL_DramWordDataWrite(fdb->attr,fileType);
3616   1              //printf("attr=%bx,fileType=%bx\n",fdb->attr,fileType);
3617   1          //Record file starting cluster
3618   1              HAL_DramWordDataWrite(fdb->start[0],fdb->start[1]);
3619   1          //Record file size in bytes
3620   1              HAL_DramWordDataWrite(fdb->size[0],fdb->size[1]);
3621   1              HAL_DramWordDataWrite(fdb->size[2],fdb->size[3]);
3622   1      
3623   1              //patch4.5@ada@Record DCF file name begin
3624   1              //Record DCF file name
3625   1              for (i8 = 0; i8 < 2; i8++)
3626   1              {
3627   2              HAL_DramWordDataWrite(fdb->name[i8 * 2],fdb->name[i8 * 2 + 1]);
3628   2              }
3629   1      }
3630          
3631          /**
3632           * @fn        UINT8 dcfFileAttrSet(UINT8 const* oldFileName, UINT8 const* newFileName, UINT8 attr, UINT8 o
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 62  

             -ption)
3633           * @brief     Set the attribute of a file.
3634           * @param     [in] oldFileName  Specify the old filename.
3635           * @param     [in] newFileName  Specify the new filename if option is ATTR_MODIFY_NAME.
3636           * @param     [in] attr                 Specify the new attribute value. It can be:\n
3637           *\n                            ATTR_R :        read only
3638           *\n                            ATTR_H : hidden
3639           *\n                            ATTR_S : system         
3640           *\n                            ATTR_L : label
3641           *\n                            ATTR_D : dir
3642           *\n                            ATTR_A : archieve
3643           *\n                            ATTR_LFN : ATTR_R+ATTR_H+ATTR_S+ATTR_L
3644           * @param     [in] option               Operation option. It can be ATTR_MODIFY_NAME, ATTR_MODIFY_ATTR and ATTR_MODIFY_
             -SIZE.
3645           * @retval    return = SUCCESS / FAIL
3646           * @see       NULL
3647          */
3648          UINT8 dcfFileAttrSet(
3649                  UINT8 const* oldFileName,
3650                  UINT8 const* newFileName,
3651                  UINT8 attr,
3652                  UINT8 option
3653          )
3654          {
3655   1              UINT8 fHdl;
3656   1              UINT8 ret = SUCCESS;
3657   1      //      xdata FILE *file;
3658   1      //      xdata x86_FDB *fdb;
3659   1              bgRwAbort();
3660   1              if (oldFileName == NULL && newFileName == NULL) {
3661   2                      return FAIL;
3662   2              }
3663   1      
3664   1              //printf("old name %s, new name %s, attr %bx, option %bx\n", oldFileName, newFileName, attr, option);
3665   1      
3666   1              fHdl = DOS_FileOpen(oldFileName, 'r');
3667   1              if (!fHdl) {
3668   2                      return FAIL;
3669   2              }
3670   1      
3671   1              /* modify file name */
3672   1              if (option & ATTR_MODIFY_NAME) {
3673   2                      if (newFileName) {
3674   3                              ret |= vfsFileAttrSet(fHdl, ATTR_MODIFY_NAME, (void*)newFileName);
3675   3                      }
3676   2      
3677   2                      if(ret == SUCCESS){ //xian ++ 20120105
3678   3                              dcfFileDramFdbUpdate(fHdl);
3679   3                      }
3680   2              }
3681   1      
3682   1              /* modify file attrib */
3683   1              if (option & ATTR_MODIFY_ATTR) {
3684   2                      ret |= vfsFileAttrSet(fHdl, ATTR_MODIFY_ATTR, (void*)&attr);
3685   2      
3686   2                      if(ret == SUCCESS){ //xian ++ 20120105
3687   3                              dcfFileDramFdbUpdate(fHdl);
3688   3                      }
3689   2              }
3690   1      
3691   1              //xian --, 20120105
3692   1              //file = (FILE *)&dos.file[fHdl];
C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 63  

3693   1              //fdb  = (x86_FDB *)&file->fdb;
3694   1      
3695   1              DOS_FileClose(fHdl);
3696   1               bgRwResume();
3697   1              return ret;
3698   1      }
3699          
3700          void dcfMmsFileNameGet(UINT8 *fileName,UINT16 fileIndx)
3701          {
3702   1              UINT8 i;
3703   1              UINT8 ch;
3704   1              UINT32 tmp;
3705   1      
3706   1              tmp = G_USR_Dir1Count;
3707   1              for ( i = 2; i!=0xff; i-- ){
3708   2                      ch = (UINT8) (tmp % 10) + '0';
3709   2                      tmp /= 10;
3710   2                      fileName[i]  = ch;
3711   2              }
3712   1              fileName[3] = '_';
3713   1              tmp = fileIndx;
3714   1              for (i = 7; i != 3; i--){
3715   2                  ch = (UINT8) (tmp % 10) + '0';
3716   2                  tmp /= 10;
3717   2                  fileName[i] = ch;
3718   2              }
3719   1              fileName[8] = '.';
3720   1              fileName[9] = 'J';
3721   1              fileName[10] = 'P';
3722   1              fileName[11] = 'G';
3723   1      }
3724          
3725          UINT8 dcfEntryMmsDir()
3726          {
3727   1              UINT8 sts;
3728   1              UINT8 *dirName ="THUMBJPG";
3729   1              
3730   1              DIR_Change(".."); 
3731   1              sts = DIR_Change(dirName);
3732   1              if(sts != DOS_SUCCESS){
3733   2                      sts = DIR_Create(dirName); 
3734   2                      sts = DIR_Change(dirName);
3735   2              }
3736   1              
3737   1              return SUCCESS;
3738   1      }
3739          
3740          void dcfExitMmsDir()
3741          {
3742   1              UINT8 dir1Name[12];
3743   1              UINT8 ret;
3744   1              
3745   1              DIR_Change("..");  
3746   1              dcfDir1NameGet(dir1Name, G_USR_Dir1Count,NORMAL_SNAPFOLDER);
3747   1              ret = DIR_Change(dir1Name);
3748   1              
3749   1              if(ret!= DOS_SUCCESS){
3750   2                      printf("name=%s\n",dir1Name);
3751   2              }       
3752   1      }


C51 COMPILER V8.08   DOS_USR                                                               12/31/2019 16:17:29 PAGE 64  

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  14339    ----
   CONSTANT SIZE    =    182    ----
   XDATA SIZE       =     57     840
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
